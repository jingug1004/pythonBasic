<?xml version="1.0" encoding="euc-kr"?>
<Window>
	<Form Height="272" Id="form" Left="8" PidAttrib="7" Title="New&#32;Form" Top="8" Ver="1.0" Width="624" WorkArea="true">
		<Datasets>
			<Dataset DataSetType="Dataset" Id="Dataset0">
				<Contents>
					<colinfo id="chk" size="256" type="STRING"/>
					<colinfo id="fullname" size="256" type="STRING"/>
					<colinfo id="clientfilename" size="256" type="STRING"/>
					<colinfo id="prog_bar" size="256" type="STRING"/>
					<colinfo id="filesize" size="256" type="INT"/>
					<colinfo id="progsize" size="256" type="STRING"/>
					<colinfo id="serverfilename" size="256" type="STRING"/>
				</Contents>
			</Dataset>
		</Datasets>
		<HttpFile Height="24" Id="HttpFile0" Left="569" Top="224" Width="24"></HttpFile>
		<Grid BindDataset="Dataset0" BKColor="user15" BkColor2="user16" BkSelColor="user17" BoldHead="true" Border="Flat" Bottom="218" Editable="TRUE" Enable="true" EndLineColor="default" Font="굴림,9" Height="176" Id="Grid0" InputPanel="FALSE" Left="32" LineColor="user18" OnCellDBLClick="Grid0_OnCellDblClick" Right="591" RowHeight="30" Style="snis_grid" TabOrder="1" TabStop="true" Top="42" UseDBuff="true" UsePopupMenu="true" UseSelColor="FALSE" Visible="true" VLineColor="default" WheelScrollRow="1" Width="559">
			<contents>
				<format id="Default">
					<columns>
						<col width="26"/>
						<col width="121"/>
						<col width="301"/>
						<col width="123"/>
					</columns>
					<head>
						<cell bkcolor="user20" col="0" display="text"/>
						<cell bkcolor="user20" col="1" display="text" text="file&#32;name"/>
						<cell bkcolor="user20" col="2" display="text" text="prog_bar"/>
						<cell bkcolor="user20" col="3" display="text" text="file&#32;size"/>
					</head>
					<body>
						<cell col="0" colid="chk" display="checkbox" edit="checkbox"/>
						<cell col="1" colid="clientfilename" display="text"/>
						<cell align="left" col="2" colid="prog_bar" color="red" display="bar"/>
						<cell align="center" col="3" colid="filesize" display="text" expr='progsize+&quot;/&quot;&#32;+&#32;filesize'/>
					</body>
				</format>
			</contents>
		</Grid>
		<FileDialog Bottom="248" Height="24" Id="FileDialog0" Left="545" Right="569" TabOrder="2" Top="224" Width="24"></FileDialog>
		<Button Appearance="FLAT" BKColor="user8" BorderColor="user35" Height="21" Id="Button0" Left="232" OnClick="Button0_OnClick" TabOrder="2" Text="추가" Top="243" Width="80"></Button>
		<Button Appearance="FLAT" BKColor="user8" BorderColor="user35" Height="21" Id="Button1" Left="320" OnClick="Button1_OnClick" TabOrder="3" Text="전송" Top="243" Width="80"></Button>
		<Static Height="22" Id="Static0" Left="39" Style="styFormTitle" TabOrder="4" Text="*&#32;해당&#32;Cell&#32;더블클릭&#32;시&#32;파일&#32;다운로드" Top="220" VAlign="Middle" Width="455"></Static>
		<Image Height="32" Id="Image0" ImageID="pop_bg" LeftMargin="25" TabOrder="6" Width="624"></Image>
		<Static Height="20" Id="Static1" Left="36" Style="snis_pop_title" TabOrder="5" Text="파일&#32;업로드&#32;및&#32;다운로드" Top="9" VAlign="Middle" Width="455"></Static>
	</Form>
	<Script><![CDATA[/***************************************************************************************************
*   Form Common Script                                                                             *
*     현재 총 100 컬럼임 되도록 100 컬럼 안으로 코딩을 하세요                                      *
123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890
***************************************************************************************************/

/***************************************************************************************************
*                                         공통 Script Include                                      *
***************************************************************************************************/
#include "lib::can_common_script.js";

/****************************************************************************************************
* <p> 사용자가 선택한 파일을 서버로 업로드하는 메소드</p>
* @param1   CyHttpFile 컴포넌트의 ID
* @param2   사용자가 선택한 파일경로 및 파일명(해당 DataSet ID.getColumn(i,"DataSet의 fileUrl ID"))
* @param3   사용자가 선택한 파일명(해당 DataSet ID.getColumn(i,"DataSet의 fileName ID"))
* @param4   선택한 현재 Row 위치
* @param5   Grid 컴포넌트에서 파일 진행상태 표시하는 컬럼의 ID
* @param6   Grid 컴포넌트 ID
* @return   파일업로드가 성공했을 경우 rtn_arr = [SUCC, 물리적 파일명, 물리적 파일크기] 리턴
*           파일업로드가 실패했을 경우 rtn_arr = [FAIL, 에러메시지] 리턴
*****************************************************************************************************/


function fnc_FileWriteAndProgress(httpfileObj, file_url, str_param, nRow, strCol, objState){
trace("DEFAULT_SERVER : " + target_url);	
	var rtn_arr = Array(3);
	rtn_arr[0] = "FAIL";
	
	if (length(file_url) < 7) {
		rtn_arr[1] = "Not Found Seleced File!";
		return rtn_arr;
	}

	if (length(str_param) < 1){
		rtn_arr[1] = "Not Found CookieParam!";
		return rtn_arr;
	} 

	var write_size;
	var tot_write_size;
	var file_size;

	remote_url =  target_url+"?mode=upload";	// 파일 업로드인 경우 mode를 upload로 설정
	
	file_size = httpfileObj.GetFileSizeLocal(file_url);
	
	httpfileObj.CookieParam = str_param;		// 파일명을 쿠기에 넣어줌

	ret = httpfileObj.OpenFile(remote_url, file_url, "PUT");
trace("upload ret : " + ret);	
	

	if( ret < 0 )	{
		rtn_arr[0] = "FAIL";
		rtn_arr[1] = "OpenFile Failed :: " + httpfileObj.ErrorMsg;
		return rtn_arr;
	}

	if (IsValidObject(objState)){
		var objDs = objState.BindDataset;
		var readpercent;

		object(objDs).SetColumn(nRow, "filesize",file_size); 		

		while(1) {
			write_size = httpfileObj.WriteFile(upload_packetSize);
			
			tot_write_size += write_size;
			
			readpercent = truncate((tot_write_size / file_size) * 100,1);
			
//			object(objDs).SetColumn(nRow, strCol, readstatus + "(" + readpercent + "%)"); 
			object(objDs).SetColumn(nRow, strCol, readpercent+"%"); 			
			object(objDs).SetColumn(nRow, "progsize", tot_write_size); 
			
			if( write_size < upload_packetSize )	
			{
				break;
			}
		}
		
	} else {
		while(1)	{
			write_size = httpfileObj.WriteFile(upload_packetSize);	
			if( write_size < upload_packetSize )	break;
		}
	}
	
	httpfileObj.CloseFile();

	if (isExistVar("objState",true)){
		if ( write_size == -1 )	{
			rtn_arr[0] = "FAIL";
			rtn_arr[1] = httpfileObj.ErrorMsg;
			return rtn_arr;
		}
	}

	var rtn_val = httpfileObj.CookieParam;
trace("upload 	rtn_val : " + rtn_val);

	var str_sp = split2(rtn_val,"&","^");

	var tmp_a;
	
	for ( var i = 0 ; i < str_sp.length() ; i++ )
	{
		tmp_a = str_sp[i];
		if (tmp_a[1] == "FAIL")
		{
			rtn_arr[0] = "FAIL";		
			rtn_arr[1] = tmp_a[1];
			return;
		}
		else
		{
			rtn_arr[i+0] = tmp_a[1];
		}
	}
	return rtn_arr;
}


/****************************************************************************************************
* <p> 사용자가 선택한 파일을 서버로부터 다운로드하는 메소드</p>
* @param1   CyHttpFile 컴포넌트의 ID
* @param2   사용자가 로컬에 다운받고자하는 파일경로 및 파일명(예:C:\TEMP\example.jpg)
* @param3   사용자가 다운받고자하는 서버의 물리적 파일명(해당 DataSet ID.getColumn(i,"DataSet의 fileName ID"))
* @param4   선택한 현재 Row 위치
* @param5   Grid 컴포넌트에서 파일 진행상태 표시하는 컬럼의 ID
* @param6   Grid 컴포넌트 ID
* @return   파일다운로드가 성공했을 경우 rtn_arr = [SUCC] 리턴
*           파일다운로드가 실패했을 경우 rtn_arr = [FAIL, 에러메시지] 리턴
*****************************************************************************************************/

function fnc_FileReadAndProgress(httpfileObj, file_url, str_cookie, str_size, nRow, strCol, objState){
	var rtn_arr = Array(3);
	rtn_arr[0] = "FAIL";

	if (length(file_url) < 7) {
		rtn_arr[1] = "Not Found Seleced File!";
		return rtn_arr;
	}
	
	if (length(str_cookie) < 1){
		rtn_arr[1] = "Not Found CookieParam!";
		return rtn_arr;
	}
trace("1. rtn_arr : " + rtn_arr);
	remote_url =  target_url+"?mode=download";
	
	var read_size;
	var tot_read_size;
	var file_size;

	httpfileObj.CookieParam = str_cookie;
trace("2. httpfileObj.CookieParam : " + httpfileObj.CookieParam);	
	file_size = str_size;

	
trace("2-1.remote_url : " +remote_url);	
trace("2-2.file_url : " +file_url);		
	ret = httpfileObj.OpenFile(remote_url, file_url, "GET");
trace("3. ret : " + ret);		
	if( ret < 0 ) {
		rtn_arr[0] = "FAIL";
		rtn_arr[1] = "OpenFile Fail ::" + httpfileObj.ErrorMsg;
		return rtn_arr;
	}
	
	tot_read_size = 0;	

	if (IsValidObject(objState)){
		var objDs = objState.BindDataset;
		var readpercent;

		while(1) {
			read_size = httpfileObj.ReadFile(download_packetSize);

			tot_read_size += read_size;
			
			readpercent = truncate((toNumber(tot_read_size) / toNumber(file_size)) * 100,1);
			
			object(objDs).SetColumn(nRow, strCol, readpercent+"%"); 
			
			if( (read_size == 0) || ( read_size == -1) ) break;
		}
		
	} else {
		while(1) {
			read_size = httpfileObj.ReadFile(download_packetSize);
			if( (read_size == 0) || ( read_size == -1) ) break;
		}
	}
trace("5. httpfileObj.CookieParam : " + httpfileObj.CookieParam);	
	httpfileObj.CloseFile();
	
	if ( ( read_size == -1) )	{
		rtn_arr[0] = "FAIL";
		rtn_arr[1] = httpfileObj.ErrorMsg;
		return rtn_arr;
	}
	
	var rtn_val = httpfileObj.CookieParam;
	
trace("6. read function rtn_val : " + rtn_val);
	var str_sp = split2(rtn_val,"&","^");
	
	var tmp_a;
	
	for ( var i = 0 ; i < str_sp.length() ; i++ )
	{
		tmp_a = str_sp[i];

		if (tmp_a[1] == "FAIL")
		{
			rtn_arr[1] = tmp_a[1];
			return;
		}
		else
		{
			rtn_arr[i+0] = tmp_a[1];
		}
	}
trace("read function rtn_arr: " + rtn_arr);	
	return rtn_arr;
}


function Button0_OnClick(obj)
{
	FileDialog0.Open();
	
	dataset0.addRow();

	dataset0.SetColumn(dataset0.row, "fullname", FileDialog0.FilePath + "\\" + FileDialog0.FileName);
	dataset0.SetColumn(dataset0.row, "clientfilename", FileDialog0.FileName);
}


function Button1_OnClick(obj)
{
	var ret;
	
	for ( var i = 0 ; i < dataset0.rowcount ; i++ )
	{
		if ( dataset0.getColumn(i,"chk") == "1" )
		{
			var str_param = dataset0.getColumn(i,"clientfilename");
			ret = fnc_FileWriteAndProgress(httpfile0,dataset0.getColumn(i,"fullname"), str_param, i, "prog_bar", grid0);
			if ( ret[0] == "FAIL" )
			{
				alert(ret[1]);
				break;
			}
			alert(ret);
			// 파일 업로드 성공 후 DataSet에 물리적인 파일명을 Set : 다운로드 테스트를 위함.
			var sPhysicalFileName = split(ret[1], "\\");
			dataset0.SetColumn(i,"serverfilename", sPhysicalFileName[length(sPhysicalFileName) - 1]);
			
		}
	}
}

function Grid0_OnCellDblClick(obj,nRow,nCell,nX,nY)
{
	// 파일 업로드가 성공된 서버의 물리적은 파일명을 DataSet에서 Get
	var str_param = dataset0.getColumn(nRow, "serverfilename");

	FileDialog0.Type = "SAVE";

	//마지막 저장 폴더 가져오기
	FileDialog0.FilePath = getReg("LastDir"); // HKEY_CURRENT_USER\Software\ToBeSoft\MiPlatform310\KTO_MP\LastDir

	
	var fileOpen = FileDialog0.Open();
	
	var rtn_arr = Array(3);
	
	
	if (fileOpen == 1)
	{
		ret = fnc_FileReadAndProgress(httpfile0, FileDialog0.FilePath + "\\"  + FileDialog0.FileName,
									  str_param, dataset0.getColumn(nRow, "filesize"), nRow,
									  "prog_bar", grid0);
		alert(ret);
	}
	else
	{
		return;
	}
	
	if ( ret[0] == "FAIL" )
	{
		alert(ret[1]);
	}
	setReg("LastDir", FileDialog0.FilePath); //현재 저장폴더 레지스트리에 저장하기
	
}


]]></Script>
</Window>