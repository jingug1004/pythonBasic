function getAttributeStringValue(attributes, name){ var item=attributes.getNamedItem(name); if(item == null) { return ""; } return item.nodeValue;}function getAttributeIntValue(attributes, name){ var item=attributes.getNamedItem(name); if(item == null) { return 0; } return parseInt(item.nodeValue);}function getAttributeColorValue(attributes, name){ var item=attributes.getNamedItem(name); if(item == null) { return "000000"; } return item.nodeValue;}function getAttributeBooleanValue(attributes, name){ var item=attributes.getNamedItem(name); if(item == null) { return false; } return (item.nodeValue=="1")?true:false;}function makeArray() { var arr=[]; for(var i=0; i<arguments.length; i++) { arr.push(arguments[i]); } return arr;}var UbiObject=Base.extend({ classname: "", constructor: function(classname) { if(typeof classname == "undefined") { classname=UbiObject.CLASSNAME; } this.classname=classname; }, GetClassname: function(){ return this.classname; }},{ CLASSNAME: "UbiObject", ATTRCLASSNAME: "classname"});var UbiMap=UbiObject.extend({ constructor: function() { this.base(UbiMap.CLASSNAME); this.keys=new Array(); this.datum=new Array(); }, Lookup: function(key){ var index=this.FindIndex(key); var rvalue; if(index >= 0) { rvalue=this.GetValue(index); } return rvalue; }, SetAt: function(key, newValue){ var index=this.FindIndex(key); if (index < 0) { this.keys.push(key); this.datum.push(newValue); } else { this.SetValue(index, newValue); } }, GetAt: function(index) { return this.GetKey(index); }, GetCount: function(){ return this.keys.length; }, FindIndex: function(key){ var index=-1; for(var i=0; i<this.GetCount(); i++) { if(key == this.GetKey(i)) { index=i; break; } } return index; }, GetKey: function(index){ return this.keys[index]; }, SetValue: function(index, value){ this.datum[index]=value; }, GetValue: function(index){ return this.datum[index]; }},{ CLASSNAME: "UbiMap"});var UbiList=UbiObject.extend({ constructor: function() { this.base(UbiList.CLASSNAME); this.datum=new Array(); }, GetSize: function() { return this.datum.length; }, GetAt: function(index) { return this.datum[index]; }, Add: function(value) { this.datum.push(value); return this.GetSize(); } },{ CLASSNAME: "UbiList"});var UbiDocObject=UbiObject.extend({ id: "", constructor: function(classname, id){ if(typeof classname == "undefined") { classname=UbiDocObject.CLASSNAME; } this.base(classname); if(typeof id == "undefined") { id=""; } this.id=id; }},{ CLASSNAME: "UbiDocObject", NODEOBJECT: "Object", ATTRID: "id", CreateInstance: function(node){ }});var UbiFontObject=UbiDocObject.extend({ name: "", style: 0, size: 0, constructor: function(){ this.base(UbiFontObject.CLASSNAME); }, getFont: function() { var str; if(this.style == 0){ str="normal normal " + this.size + "px " + this.name; }else if(this.style == 1){ str="normal bold " + this.size + "px " + this.name; }else if(this.style == 2){ str="italic normal " + this.size + "px " + this.name; }else if(this.style == 3){ str="italic bold " + this.size + "px " + this.name; } return str; }, getFontSize: function() { return this.size; }},{ CLASSNAME: "UbiFontObject", NODEFONTOBJ: "Fontobj", ATTRNAME: "name", ATTRSTYLE: "style", ATTRSIZE: "size", CreateInstance: function(node){ var data=UbiFontObject.getData(node); var fontobj=new UbiFontObject(); fontobj.id=data.id; fontobj.name=data.name; fontobj.style=data.style; fontobj.size=data.size; return fontobj; }, getData: function(node) { var attributes=node.attributes; return { id: getAttributeStringValue(attributes, UbiDocObject.ATTRID), name: getAttributeStringValue(attributes, UbiFontObject.ATTRNAME), style: getAttributeIntValue(attributes, UbiFontObject.ATTRSTYLE), size: getAttributeIntValue(attributes, UbiFontObject.ATTRSIZE) }; }});var UbiLineObject=UbiDocObject.extend({ type: 0, thickness: 0, colorid: "", constructor: function(){ this.base(UbiLineObject.CLASSNAME); }, getWidth : function(){ var str; str=this.thickness; return str; }, getStyle : function() { var str; if(this.type == -1) { str="none"; }else if(this.type == 0) { str="solid"; }else if(this.type == 1) { str="dotted"; }else if(this.type == 2) { str="dashed"; }else if(this.type == 3) { str="dashed"; } return str; }},{ CLASSNAME: "UbiLineObject", NODELINEOBJ: "Lineobj", ATTRTYPE: "type", ATTRTHICKNESS: "thickness", ATTRCOLORID: "colorid", CreateInstance: function(node){ var data=UbiLineObject.getData(node); var lineobj=new UbiLineObject(); lineobj.id=data.id; lineobj.type=data.type; lineobj.thickness=data.thickness; lineobj.colorid=data.colorid; return lineobj; }, getData: function(node) { var attributes=node.attributes; return { id: getAttributeStringValue(attributes, UbiDocObject.ATTRID), type: getAttributeIntValue(attributes, UbiLineObject.ATTRTYPE), thickness: getAttributeIntValue(attributes, UbiLineObject.ATTRTHICKNESS), colorid: getAttributeStringValue(attributes, UbiLineObject.ATTRCOLORID) }; }});var UbiColorObject=UbiDocObject.extend({ color: "", constructor: function(){ this.base(UbiColorObject.CLASSNAME); }},{ CLASSNAME: "UbiColorObject", NODECOLOROBJ: "Colorobj", ATTRCOLOR: "color", CreateInstance: function(node){ var data=UbiColorObject.getData(node); var colorobj=new UbiColorObject(); colorobj.id=data.id; colorobj.color=data.color; return colorobj; }, getData: function(node) { var attributes=node.attributes; return { id: getAttributeStringValue(attributes, UbiDocObject.ATTRID), color: getAttributeColorValue(attributes, UbiColorObject.ATTRCOLOR) }; }});var UbiBorderObject=UbiDocObject.extend({ top: "", bottom: "", left: "", right: "", diagonaldown: "", diagonalup: "", constructor: function(){ this.base(UbiBorderObject.CLASSNAME); }},{ CLASSNAME: "UbiBorderObject", NODEBORDEROBJ: "Borderobj", ATTRTOP: "top", ATTRBOTTOM: "bottom", ATTRLEFT: "left", ATTRRIGHT: "right", ATTRDIAGONALDOWN: "diagonaldown", ATTRDIAGONALUP: "diagonalup", CreateInstance: function(node){ var data=UbiBorderObject.getData(node); var borderobj=new UbiBorderObject(); borderobj.id=data.id; borderobj.top=data.top; borderobj.bottom=data.bottom; borderobj.left=data.left; borderobj.right=data.right; borderobj.diagonaldown=data.diagonaldown; borderobj.diagonalup=data.diagonalup; return borderobj; }, getData: function(node) { var attributes=node.attributes; return { id: getAttributeStringValue(attributes, UbiDocObject.ATTRID), top: getAttributeStringValue(attributes, UbiBorderObject.ATTRTOP), bottom: getAttributeStringValue(attributes, UbiBorderObject.ATTRBOTTOM), left: getAttributeStringValue(attributes, UbiBorderObject.ATTRLEFT), right: getAttributeStringValue(attributes, UbiBorderObject.ATTRRIGHT), diagonaldown: getAttributeStringValue(attributes, UbiBorderObject.ATTRDIAGONALDOWN), diagonalup: getAttributeStringValue(attributes, UbiBorderObject.ATTRDIAGONALUP) }; }});var UbiImageObject=UbiDocObject.extend({ width: 0, height: 0, originalsize: false, fixedrate: false, brightness: 0, loadtype: 0, loadsrc: "", constructor: function(){ this.base(UbiImageObject.CLASSNAME); }},{ CLASSNAME: "UbiImageObject", NODEIMAGEOBJ: "Imageobj", ATTRWIDTH: "width", ATTRHEIGHT: "height", ATTRORIGINALSIZE: "originalsize", ATTRFIXEDRATE: "fixedrate", ATTRBRIGHTNESS: "brightness", ATTRLOADTYPE: "loadtype", ATTRLOADSRC: "loadsrc", NODEIMAGESRC: "src", CreateInstance: function(node){ var data=UbiImageObject.getData(node); var imageobj=new UbiImageObject(); imageobj.id=data.id; imageobj.width=data.width; imageobj.height=data.height; imageobj.originalsize=data.originalsize; imageobj.fixedrate=data.fixedrate; imageobj.brightness=data.brightness; imageobj.loadtype=data.loadtype; imageobj.loadsrc=data.loadsrc; return imageobj; }, getData: function(node) { var attributes=node.attributes; return { id: getAttributeStringValue(attributes, UbiDocObject.ATTRID), width: getAttributeIntValue(attributes, UbiImageObject.ATTRWIDTH), height: getAttributeIntValue(attributes, UbiImageObject.ATTRHEIGHT), originalsize: getAttributeBooleanValue(attributes, UbiImageObject.ATTRORIGINALSIZE), fixedrate: getAttributeBooleanValue(attributes, UbiImageObject.ATTRFIXEDRATE), brightness: getAttributeIntValue(attributes, UbiImageObject.ATTRBRIGHTNESS), loadtype: getAttributeIntValue(attributes, UbiImageObject.ATTRLOADTYPE), loadsrc: getAttributeStringValue(attributes, UbiImageObject.ATTRLOADSRC) }; }});var UbiDocProperty=UbiObject.extend({ width: 0, height: 0, margintop: 0, marginbottom: 0, marginleft: 0, marginright: 0, pagesize: "A4", orientation: "Portrait", constructor: function() { this.base(UbiDocProperty.CLASSNAME); }},{ CLASSNAME: "UbiDocProperty", NODEDOCPROPERTY: "DocProperty", ATTRWIDTH: "width", ATTRHEIGHT: "height", ATTRMARGINTOP: "margintop", ATTRMARGINBOTTOM: "marginbottom", ATTRMARGINLEFT: "marginleft", ATTRMARGINRIGHT: "marginright", ATTRPAGESIZE: "pagesize", ATTRORIENTATION: "orientation", CreateInstance: function(parent) { var data=UbiDocProperty.getData(parent); var docprop=new UbiDocProperty(); docprop.width=data.width; docprop.height=data.height; docprop.margintop=data.margintop; docprop.marginbottom=data.marginbottom; docprop.marginleft=data.marginleft; docprop.marginright=data.marginright; docprop.pagesize=data.pagesize; docprop.orientation=data.orientation; return docprop; }, getData: function(parent) { var node=parent.getElementsByTagName(UbiDocProperty.NODEDOCPROPERTY)[0]; var attributes=node.attributes; return { width: getAttributeIntValue(attributes, UbiDocProperty.ATTRWIDTH), height: getAttributeIntValue(attributes, UbiDocProperty.ATTRHEIGHT), margintop: getAttributeIntValue(attributes, UbiDocProperty.ATTRMARGINTOP), marginbottom: getAttributeIntValue(attributes, UbiDocProperty.ATTRMARGINBOTTOM), marginleft: getAttributeIntValue(attributes, UbiDocProperty.ATTRMARGINLEFT), marginright: getAttributeIntValue(attributes, UbiDocProperty.ATTRMARGINRIGHT), pagesize: getAttributeStringValue(attributes, UbiDocProperty.ATTRPAGESIZE), orientation: getAttributeStringValue(attributes, UbiDocProperty.ATTRORIENTATION) }; }});var UbiItem=UbiObject.extend({ id: "", x: 0, y: 0, width: 0, height: 0, foregroundid: "", backgroundid: "", transparent: false, iseditable: false, linked: false, linkfilename: "", linkargs: "", linkstyle: "", constructor: function(classname) { if(typeof classname == "undefined") { classname=UbiItem.CLASSNAME; } this.base(classname); }},{ CLASSNAME: "UbiItem", NODEITEM: "Item", ATTRID: "id", ATTRX: "x", ATTRY: "y", ATTRWIDTH: "width", ATTRHEIGHT: "height", ATTRFORECOLORID: "forecolorid", ATTRBACKCOLORID: "backcolorid", ATTRTRANSPARENT: "transparent", ATTRISEDITABLE: "iseditable", ATTRLINKED: "linked", ATTRLINKFILENAME: "linkfilename", ATTRLINKARGS: "linkarg", ATTRLINKSTYLE: "linkstyle", NODELINKARG: "Linkarg", ATTRNAME: "name", CreateInstance: function(node, doc){ var attributes=node.attributes; var _classname=getAttributeStringValue(attributes, UbiObject.ATTRCLASSNAME); if (_classname == UbiTextItem.CLASSNAME) { return UbiTextItem.CreateInstance(node, doc); } else if (_classname == UbiCircleItem.CLASSNAME) { return UbiCircleItem.CreateInstance(node, doc); } else if (_classname == UbiLineItem.CLASSNAME) { return UbiLineItem.CreateInstance(node, doc); } else if (_classname == UbiRectangleItem.CLASSNAME) { return UbiRectangleItem.CreateInstance(node, doc); } else if (_classname == UbiImageItem.CLASSNAME) { return UbiImageItem.CreateInstance(node, doc); } else if (_classname == UbiBarcodeItem.CLASSNAME) { return UbiBarcodeItem.CreateInstance(node, doc); } }, SetMemberFromNode: function(item, node){ var data=UbiItem.getData(node); item.id=data.id; item.x=data.x; item.y=data.y; item.width=data.width; item.height=data.height; item.foregroundid=data.foregroundid; item.backgroundid=data.backgroundid; item.transparent=data.transparent; item.iseditable=data.iseditable; item.linked=data.linked; item.linkfilename=data.linkfilename; item.linkargs=data.linkargs; item.linkstyle=data.linkstyle; }, getData: function(node) { var attributes=node.attributes; return { id: getAttributeStringValue(attributes, UbiItem.ATTRID), x: getAttributeIntValue(attributes, UbiItem.ATTRX), y: getAttributeIntValue(attributes, UbiItem.ATTRY), width: getAttributeIntValue(attributes, UbiItem.ATTRWIDTH), height: getAttributeIntValue(attributes, UbiItem.ATTRHEIGHT), foregroundid: getAttributeStringValue(attributes, UbiItem.ATTRFORECOLORID), backgroundid: getAttributeStringValue(attributes, UbiItem.ATTRBACKCOLORID), transparent: getAttributeBooleanValue(attributes, UbiItem.ATTRTRANSPARENT), iseditable: getAttributeBooleanValue(attributes, UbiItem.ATTRISEDITABLE), linked: getAttributeBooleanValue(attributes, UbiItem.ATTRLINKED), linkfilename: getAttributeStringValue(attributes, UbiItem.ATTRLINKFILENAME), linkargs: getAttributeStringValue(attributes, UbiItem.ATTRLINKARGS), linkstyle: getAttributeStringValue(attributes, UbiItem.ATTRLINKSTYLE) }; }});var UbiTextItem=UbiItem.extend({ value: "", fontid: "", halign: 0, valign: 0, underlined: false, textdirection: true, borderid: "", leftMargin: 0, rightMargin: 0, topMargin: 0, bottomMargin: 0, lineSpace: 0, constructor: function() { this.base(UbiTextItem.CLASSNAME); }, getVAlign: function() { var str; if(this.valign == 0) { str="top"; }else if(this.valign == 1) { str="middle"; }else if(this.valign == 2) { str="bottom"; } return str; }, getHAlign: function() { var str; if(this.halign == 0) { str="left"; }else if(this.halign == 1) { str="center"; }else if(this.halign == 2) { str="right"; } return str; }},{ CLASSNAME: "UbiTextItem", NODETEXT: "Text", ATTRFONTID: "fontid", ATTRHALIGN: "halign", ATTRVALIGN: "valign", ATTRUNDERLINED: "underlined", ATTRTEXTDIRECTION: "textdirection", ATTRBORDERID: "border", ATTRMARGINLEFT: "marginleft", ATTRMARGINRIGHT: "marginright", ATTRMARGINTOP: "margintop", ATTRMARGINBOTTOM: "marginbottom", ATTRLINESPACE: "linespace", CreateInstance: function(node, doc){ var data=UbiTextItem.getData(node); var item=new UbiTextItem(); UbiItem.SetMemberFromNode(item, node); item.value=data.value; item.fontid=data.fontid; item.halign=data.halign; item.valign=data.valign; item.underlined=data.underlined; item.textdirection=data.textdirection; item.borderid=data.borderid; item.leftMargin=data.leftMargin; item.rightMargin=data.rightMargin; item.topMargin=data.topMargin; item.bottomMargin=data.bottomMargin; item.lineSpace=data.lineSpace; return item; }, getData: function(node) { var textnode=node.getElementsByTagName(UbiTextItem.NODETEXT)[0]; var textattributes=textnode.attributes; return { value: (textnode.childNodes[0]==null)?"":textnode.childNodes[0].nodeValue, fontid: getAttributeStringValue(textattributes, UbiTextItem.ATTRFONTID), halign: getAttributeIntValue(textattributes, UbiTextItem.ATTRHALIGN), valign: getAttributeIntValue(textattributes, UbiTextItem.ATTRVALIGN), underlined: getAttributeBooleanValue(textattributes, UbiTextItem.ATTRUNDERLINED), textdirection: getAttributeBooleanValue(textattributes, UbiTextItem.ATTRTEXTDIRECTION), borderid: getAttributeStringValue(textattributes, UbiTextItem.ATTRBORDERID), leftMargin: getAttributeIntValue(textattributes, UbiTextItem.ATTRMARGINLEFT), rightMargin: getAttributeIntValue(textattributes, UbiTextItem.ATTRMARGINRIGHT), topMargin: getAttributeIntValue(textattributes, UbiTextItem.ATTRMARGINTOP), bottomMargin: getAttributeIntValue(textattributes, UbiTextItem.ATTRMARGINBOTTOM), lineSpace: getAttributeIntValue(textattributes, UbiTextItem.ATTRLINESPACE) }; }});var UbiShapeItem=UbiItem.extend({ lineid: "", constructor: function(classname) { this.base(classname); }},{ CLASSNAME: "UbiShapeItem", NODESHAPE: "Shape", ATTRLINEID: "lineid", SetMemberFromNode: function(item, node){ var data=UbiShapeItem.getData(node); item.lineid=data.lineid; }, getData: function(node) { var attributes=node.attributes; return { lineid: getAttributeStringValue(attributes, UbiShapeItem.ATTRLINEID) }; }});var UbiCircleItem=UbiShapeItem.extend({ constructor: function() { this.base(UbiCircleItem.CLASSNAME); }},{ CLASSNAME: "UbiCircleItem", CreateInstance: function(node, doc){ var item=new UbiCircleItem(); item.doc=doc; UbiItem.SetMemberFromNode(item, node); var shapenode=node.getElementsByTagName(UbiShapeItem.NODESHAPE)[0]; UbiShapeItem.SetMemberFromNode(item, shapenode); return item; }, getData: function(node) { }});var UbiLineItem=UbiShapeItem.extend({ linedir: 0, constructor: function() { this.base(UbiLineItem.CLASSNAME); }},{ CLASSNAME: "UbiLineItem", ATTRLINEDIR: "linedir", CreateInstance: function(node, doc){ var item=new UbiLineItem(); item.doc=doc; UbiItem.SetMemberFromNode(item, node); var shapenode=node.getElementsByTagName(UbiShapeItem.NODESHAPE)[0]; var data=UbiLineItem.getData(shapenode); UbiShapeItem.SetMemberFromNode(item, shapenode); item.linedir=data.linedir; return item; }, getData: function(node) { var attributes=node.attributes; return { linedir: getAttributeIntValue(attributes, UbiLineItem.ATTRLINEDIR) }; }});var UbiRectangleItem=UbiShapeItem.extend({ edgetype: 0, edgewidth: 0, constructor: function() { this.base(UbiRectangleItem.CLASSNAME); }},{ CLASSNAME: "UbiRectangleItem", ATTREDGETYPE: "edgetype", ATTREDGEWIDTH: "edgewidth", CreateInstance: function(node, doc){ var item=new UbiRectangleItem(); item.doc=doc; UbiItem.SetMemberFromNode(item, node); var shapenode=node.getElementsByTagName(UbiShapeItem.NODESHAPE)[0]; var data=UbiRectangleItem.getData(shapenode); UbiShapeItem.SetMemberFromNode(item, shapenode); item.edgetype=data.edgetype; item.edgewidth=data.edgewidth; return item; }, getData: function(node) { var attributes=node.attributes; return { edgetype: getAttributeIntValue(attributes, UbiRectangleItem.ATTREDGETYPE), edgewidth: getAttributeIntValue(attributes, UbiRectangleItem.ATTREDGEWIDTH) }; }});var UbiImageItem=UbiItem.extend({ imageid: "", halign: 0, valign: 0, borderid: "", constructor: function() { this.base(UbiImageItem.CLASSNAME); }, getVAlign: function() { var str; if(this.valign == 0) { str="top"; }else if(this.valign == 1) { str="middle"; }else if(this.valign == 2) { str="bottom"; } return str; }, getHAlign: function() { var str; if(this.halign == 0) { str="left"; }else if(this.halign == 1) { str="center"; }else if(this.halign == 2) { str="right"; } return str; }},{ CLASSNAME: "UbiImageItem", NODEIMAGE: "Image", ATTRIMAGEID: "imageid", ATTRHALIGN: "halign", ATTRVALIGN: "valign", ATTRBORDERID: "borderid", CreateInstance: function(node, doc){ var item=new UbiImageItem(); item.doc=doc; UbiItem.SetMemberFromNode(item, node); var imagenode=node.getElementsByTagName(UbiImageItem.NODEIMAGE)[0]; var data=UbiImageItem.getData(imagenode); item.imageid=data.imageid; item.halign=data.halign; item.valign=data.valign; item.borderid=data.borderid; return item; }, getData: function(node) { var attributes=node.attributes; return { imageid: getAttributeStringValue(attributes, UbiImageItem.ATTRIMAGEID), halign: getAttributeIntValue(attributes, UbiImageItem.ATTRHALIGN), valign: getAttributeIntValue(attributes, UbiImageItem.ATTRVALIGN), borderid: getAttributeStringValue(attributes, UbiImageItem.ATTRBORDERID) }; }});var UbiBarcodeItem=UbiItem.extend({ code: "", borderid: "", loadtype: 0, loadsrc: "", constructor: function() { this.base(UbiBarcodeItem.CLASSNAME);}},{ CLASSNAME: "UbiBarcodeItem", NODEBARCODE: "Barcode", ATTRBORDERID: "borderid", ATTRLOADTYPE: "loadtype", ATTRLOADSRC: "loadsrc", CreateInstance: function(node, doc){ var item=new UbiBarcodeItem(); UbiItem.SetMemberFromNode(item, node); var barcodenode=node.getElementsByTagName(UbiBarcodeItem.NODEBARCODE)[0]; var data=UbiBarcodeItem.getData(barcodenode); item.code=data.code; item.borderid=data.borderid; item.loadtype=data.loadtype; item.loadsrc=data.loadsrc; return item; }, getData: function(node) { var attributes=node.attributes; return { code: node.childNodes[0].nodeValue, borderid: getAttributeStringValue(attributes, UbiBarcodeItem.ATTRBORDERID), loadtype: getAttributeIntValue(attributes, UbiBarcodeItem.ATTRLOADTYPE), loadsrc: getAttributeStringValue(attributes, UbiBarcodeItem.ATTRLOADSRC) }; }});var UbiBarcodeItem=UbiItem.extend({ code: "", borderid: "", loadtype: 0, loadsrc: "", constructor: function() { this.base(UbiBarcodeItem.CLASSNAME);}},{ CLASSNAME: "UbiBarcodeItem", NODEBARCODE: "Barcode", ATTRBORDERID: "borderid", ATTRLOADTYPE: "loadtype", ATTRLOADSRC: "loadsrc", CreateInstance: function(node, doc){ var item=new UbiBarcodeItem(); UbiItem.SetMemberFromNode(item, node); var barcodenode=node.getElementsByTagName(UbiBarcodeItem.NODEBARCODE)[0]; var data=UbiBarcodeItem.getData(barcodenode); item.code=data.code; item.borderid=data.borderid; item.loadtype=data.loadtype; item.loadsrc=data.loadsrc; return item; }, getData: function(node) { var attributes=node.attributes; return { code: node.childNodes[0].nodeValue, borderid: getAttributeStringValue(attributes, UbiBarcodeItem.ATTRBORDERID), loadtype: getAttributeIntValue(attributes, UbiBarcodeItem.ATTRLOADTYPE), loadsrc: getAttributeStringValue(attributes, UbiBarcodeItem.ATTRLOADSRC) }; }});var UbiChartComponent=UbiObject.extend({ id: "", x: 0, y: 0, width: 0, height: 0, linked: false, linkfilename: "", linkargs: "", linkstyle: "", loadtype: 0, loadsrc: "", constructor: function() { this.base(UbiChartComponent.CLASSNAME); }},{ CLASSNAME: "UbiChartComponent", NODECHARTCOMPONENT: "Chartcomponent", ATTRID: "id", ATTRX: "x", ATTRY: "y", ATTRWIDTH: "width", ATTRHEIGHT: "height", ATTRLINKED: "linked", ATTRLINKFILENAME: "linkfilename", ATTRLINKSTYLE: "linkstyle", NODELINKARG: "Linkarg", ATTRNAME: "name", ATTRLOADTYPE: "loadtype", ATTRLOADSRC: "loadsrc", CreateInstance: function(node, doc){ var data=UbiChartComponent.getData(node); var charcomponent=new UbiChartComponent(); charcomponent.id=data.id; charcomponent.x=data.x; charcomponent.y=data.y; charcomponent.width=data.width; charcomponent.height=data.height; charcomponent.linked=data.linked; charcomponent.linkfilename=data.linkfilename; charcomponent.loadtype=data.loadtype; charcomponent.loadsrc=data.loadsrc; return charcomponent; }, getData: function(node) { var attributes=node.attributes; return { id: getAttributeStringValue(attributes, UbiChartComponent.ATTRID), x: getAttributeIntValue(attributes, UbiChartComponent.ATTRX), y: getAttributeIntValue(attributes, UbiChartComponent.ATTRY), width: getAttributeIntValue(attributes, UbiChartComponent.ATTRWIDTH), height: getAttributeIntValue(attributes, UbiChartComponent.ATTRHEIGHT), linked: getAttributeBooleanValue(attributes, UbiChartComponent.ATTRLINKED), linkfilename: getAttributeStringValue(attributes, UbiChartComponent.ATTRLINKFILENAME), linkstyle: getAttributeStringValue(attributes, UbiChartComponent.ATTRLINKSTYLE), loadtype: getAttributeIntValue(attributes, UbiChartComponent.ATTRLOADTYPE), loadsrc: getAttributeStringValue(attributes, UbiChartComponent.ATTRLOADSRC) }; }});var UbiPage=UbiObject.extend({ constructor: function(doc) { this.base(UbiPage.CLASSNAME); this.doc=doc; this.items=new UbiList(); this.chartcomponents=new UbiList(); }},{ CLASSNAME: "UbiPage", NODEPAGE: "Page", ATTRPAGENUM: "pagenum", NODEFONTID: "Fontid", NODELINEID: "Lineid", NODECOLORID: "Colorid", NODEBORDERID: "Borderid", NODEOBJECTID: "Objectid", CreateInstance: function(node, doc){ var data=UbiPage.getData(node); var page=new UbiPage(doc); var itemlist=data.itemlist; for(var i=0; i<itemlist.length; i++) { var childnode=itemlist[i]; page.items.Add(UbiItem.CreateInstance(childnode, doc)); } var chartcomponentlist=data.chartcomponentlist; for(var i=0; i<chartcomponentlist.length; i++) { var childnode=chartcomponentlist[i]; page.chartcomponents.Add(UbiChartComponent.CreateInstance(childnode, doc)); } return page; }, getData: function(node) { return { itemlist: node.getElementsByTagName(UbiItem.NODEITEM), chartcomponentlist: node.getElementsByTagName(UbiChartComponent.NODECHARTCOMPONENT) }; }});var UbiDoc=UbiObject.extend({ version: "", pagecount: 0, daemonid: "", constructor: function() { this.base(UbiDoc.CLASSNAME); this.docprop; this.pages=new UbiList(); this.fonts=new UbiMap(); this.lines=new UbiMap(); this.colors=new UbiMap(); this.borders=new UbiMap(); this.objects=new UbiMap(); }},{ CLASSNAME: "UbiDoc", NODEDOC: "Doc", ATTRVERSION: "version", ATTRPAGECOUNT: "pagecount", ATTRDAEMONID: "daemonid", CreateInstance: function(node) { var docnode=node.getElementsByTagName(UbiDoc.NODEDOC)[0]; var data=UbiDoc.getData(docnode); var doc=new UbiDoc(); doc.version=data.version; doc.pagecount=data.pagecount; doc.daemonid=data.daemonid; doc.docprop=UbiDocProperty.CreateInstance(docnode); var fontlist=data.fontlist; for(var i=0; i<fontlist.length; i++) { var fontnode=fontlist[i]; var fontobj=UbiFontObject.CreateInstance(fontnode); doc.fonts.SetAt(fontobj.id, fontobj); } var linelist=data.linelist; for(var i=0; i<linelist.length; i++) { var linenode=linelist[i]; var lineobj=UbiLineObject.CreateInstance(linenode); doc.lines.SetAt(lineobj.id, lineobj); } var colorlist=data.colorlist; for(var i=0; i<colorlist.length; i++) { var colornode=colorlist[i]; var colorobj=UbiColorObject.CreateInstance(colornode); doc.colors.SetAt(colorobj.id, colorobj); } var borderlist=data.borderlist; for(var i=0; i<borderlist.length; i++) { var bordernode=borderlist[i]; var borderobj=UbiBorderObject.CreateInstance(bordernode); doc.borders.SetAt(borderobj.id, borderobj); } var imagelist=data.imagelist; for(var i=0; i<imagelist.length; i++) { var imagenode=imagelist[i]; var imageobj=UbiImageObject.CreateInstance(imagenode); doc.objects.SetAt(imageobj.id, imageobj); } var pagelist=data.pagelist; for(var i=0; i<pagelist.length; i++) { var pagenode=pagelist[i]; var page=UbiPage.CreateInstance(pagenode, doc); doc.pages.Add(page); } return doc; }, getData: function(docnode) { var docattributes=docnode.attributes; return { version: getAttributeStringValue(docattributes, UbiDoc.ATTRVERSION), pagecount: getAttributeIntValue(docattributes, UbiDoc.ATTRPAGECOUNT), daemonid: getAttributeStringValue(docattributes, UbiDoc.ATTRDAEMONID), fontlist: docnode.getElementsByTagName(UbiFontObject.NODEFONTOBJ), linelist: docnode.getElementsByTagName(UbiLineObject.NODELINEOBJ), colorlist: docnode.getElementsByTagName(UbiColorObject.NODECOLOROBJ), borderlist: docnode.getElementsByTagName(UbiBorderObject.NODEBORDEROBJ), imagelist: docnode.getElementsByTagName(UbiImageObject.NODEIMAGEOBJ), pagelist: docnode.getElementsByTagName(UbiPage.NODEPAGE) }; }});