var cindex=0;var iindex=0;var cnt=0;var UbiDocument=Base.extend({ jrffile : "", key : "", resid: "", keyurl : "", textitems : null, zindex : 0, constructor: function(doc, jrffile, key, resid, keyurl) { this.jrffile=jrffile; this.doc=doc; this.key=key; this.resid=resid; this.keyurl=keyurl; this.zindex=0; }, Draw: function(divid, pagenum, ds) { if( typeof ds == "undefined" ) ds=1.0; if( pagenum > this.doc.pages.GetSize() || pagenum <= 0 ) { alert( pagenum + "번째 페이지는 존재하지 않습니다."); return; } var page=this.doc.pages.GetAt(pagenum - 1); var urlstr=this.keyurl + "?jrffile=" + this.jrffile + "&key=" + this.key + "&resid=" + this.resid; DrawPage(divid, this.doc, page, urlstr, ds); function DrawPage(divid, doc, page, keyurl, ds) { var cssStr=".ubidiv {position: absolute; margin:0px; overflow: hidden; }\n"; cssStr += ".ubitable { margin:0px; padding:0px; border:0px; border-spacing:0px; border-collapse:collapse; table-layout:fixed; }\n"; cssStr += ".ubitd { margin:0px; padding:0px; word-wrap:break-word; white-space:pre; word-break:break-all; letter-spacing:-0.3px; }"; var styleNode=document.createElement("style"); styleNode.setAttribute("type", "text/css"); if (_isIE) { styleNode.styleSheet.cssText=cssStr; } else { try{ styleNode.innerHTML=cssStr; }catch(e){ styleNode.innerText=cssStr; } } divid.appendChild(styleNode); cindex=0; iindex=0; textitems=new Array(); var items=page.items; for( var i=0; i < items.GetSize(); i++ ) { var item=items.GetAt(i); if( item.GetClassname() == UbiTextItem.CLASSNAME ) DrawTextItem(divid, doc, item, ds); else if( item.GetClassname() == UbiLineItem.CLASSNAME ) DrawLineItem(divid, doc, item, ds); else if( item.GetClassname() == UbiRectangleItem.CLASSNAME ) DrawRectangleItem(divid, doc, item, ds); else if( item.GetClassname() == UbiCircleItem.CLASSNAME ) DrawCircleItem(divid, doc, item, ds); else if( item.GetClassname() == UbiBarcodeItem.CLASSNAME ) DrawBarcodeItem(divid, doc, item, keyurl, ds); else if( item.GetClassname() == UbiImageItem.CLASSNAME ) DrawImageItem(divid, doc, item, keyurl, ds); } var charts=page.chartcomponents; for( var i=0; i < charts.GetSize(); i++ ) { var chart=charts.GetAt(i); DrawChartComponent(divid, doc, chart, keyurl, ds); } textitems.sort(sortNumber); var nodes=divid.childNodes; var tabindex=12; var width=parseInt(doc.docprop.width); for( var i=0; i < nodes.length; i++ ) { if( nodes[i].nodeName == "DIV" ) { var x=parseInt(nodes[i].style.left); var y=parseInt(nodes[i].style.top); var key=x + y * width; var index=findIndex(key); if( index >= 0 ) nodes[i].tabIndex=tabindex + index; } } function findIndex(value) { for( var i=0; i < textitems.length; i++ ) { if( value == textitems[i] ) return i; } return -1; } function sortNumber(a, b) { return a-b; } } function DrawTextItem(divid, doc, item, ds) { if( item.width == 0 || item.height == 0 ) return; var div=document.createElement("div"); div.id=item.id; div.className="ubidiv"; divid.appendChild(div); textitems.push(parseInt(item.x)+(parseInt(item.y)*parseInt(doc.docprop.width))); div.style.left=item.x + "px"; div.style.top=item.y + "px"; div.style.width=(item.width + 1) - (getBorderWidth("left", doc, item) + getBorderWidth("right", doc, item)) + "px"; div.style.height=(item.height + 1) - (getBorderWidth("top", doc, item) + getBorderWidth("bottom", doc, item)) + "px"; div.style.borderTop=getBorderWidth("top", doc, item) + "px " + getBorderStyle("top", doc, item) + " #" + getBorderColor("top", doc, item); div.style.borderRight=getBorderWidth("right", doc, item) + "px " + getBorderStyle("right", doc, item) + " #" + getBorderColor("right", doc, item); div.style.borderBottom=getBorderWidth("bottom", doc, item) + "px " + getBorderStyle("bottom", doc, item) + " #" + getBorderColor("bottom", doc, item); div.style.borderLeft=getBorderWidth("left", doc, item) + "px " + getBorderStyle("left", doc, item) + " #" + getBorderColor("left", doc, item); div.style.padding="0px"; if( item.transparent ) div.style.backgroundColor="transparent"; else div.style.backgroundColor="#" + getBackgroundColor(doc, item); div.style.font=getFont(doc, item); div.style.color="#" + getForegroundColor(doc, item); if(div.style.font.indexOf("bold") != -1 ) { div.style.letterSpacing= "-1"; } else { div.style.letterSpacing= "0"; } if( item.underlined ) div.style.textDecoration="underline"; var table=document.createElement("table"); var tbody=document.createElement("tbody"); var tr=document.createElement("tr"); var td=document.createElement("td"); table.className="ubitable"; table.style.left=item.leftMargin + "px"; table.style.top=item.topMargin + "px"; table.style.width=(item.width + 1) - (getBorderWidth("left", doc, item) + getBorderWidth("right", doc, item)) - (item.leftMargin + item.rightMargin) + "px"; table.style.height=(item.height + 1) - (getBorderWidth("top", doc, item) + getBorderWidth("bottom", doc, item)) - (item.topMargin + item.bottomMargin) + "px"; td.className="ubitd"; td.style.textAlign=item.getHAlign(); td.style.verticalAlign=item.getVAlign(); if( item.lineSpace > 0 ) td.style.lineHeight=(getFontSize(doc, item) + item.lineSpace) + "px"; if (item.linked) { var alink=document.createElement("a"); if (item.linkstyle == "SCRIPT") { alink.href="javascript:"+item.linkfilename; } else if (item.linkstyle == "REPORT"){ alink.href="javascript:refreshFrame('"+ divid.parentNode.parentNode.parentNode.id +"','"+ item.linkfilename +"','"+ item.linkargs +"')"; } else if (item.linkstyle == "WEBPAGE"){ var url=item.linkfilename; if (item.linkfilename.indexOf(":/"+"/") == -1 && item.linkfilename.indexOf("mailto:") == -1) { url="http:/"+"/"+ item.linkfilename; } alink.href="javascript:window.open(\""+ url + item.linkargs +"\"); void 0;"; } alink.appendChild(document.createTextNode(item.value)); td.appendChild(alink); } else { if (_isIE6 || _isIE7) { td.innerText=item.value; } else { td.appendChild(document.createTextNode(item.value)); } } tr.appendChild(td); tbody.appendChild(tr); table.appendChild(tbody); div.appendChild(table); }; function DrawLineItem(divid, doc, item, ds) { if( item.width == 0 || item.height == 0 ) { var div=document.createElement("div"); div.id=item.id; divid.appendChild(div); div.style.position="absolute"; div.style.top=item.y + "px"; div.style.left=item.x + "px"; div.style.width=((item.width == 0)?getLineThickness(doc, item):(item.width + 1)) + "px"; div.style.height=((item.height == 0)?getLineThickness(doc, item):(item.height + 1)) + "px"; if( _isIE6 ) { div.style.lineHeight='0px'; div.style.fontSize='0px'; } if( _isIE6 && parseInt(div.style.height) == 1 ) { div.style.border="0px"; div.style.borderTop="1px solid #" + getLineColor(doc, item); } else { div.style.backgroundColor="#" + getLineColor(doc, item); } } else { var canvas=document.createElement("canvas"); canvas.id=item.id + (cindex++)+ "cv"; divid.appendChild(canvas); if( !canvas.getContext ) G_vmlCanvasManager.initElement(canvas); canvas.style.position="absolute"; canvas.style.left=item.x + "px"; canvas.style.top=item.y + "px"; canvas.width=item.width + 1; canvas.height=item.height + 1; var ctx=canvas.getContext("2d"); ctx.save(); ctx.lineWidth=getLineThickness(doc, item); ctx.strokeStyle="#" + getLineColor(doc, item); ctx.beginPath(); if( item.linedir == 1 ) { ctx.moveTo(0, canvas.height); ctx.lineTo(canvas.width, 0); } else { ctx.moveTo(0, 0); ctx.lineTo(canvas.width, canvas.height); } ctx.closePath(); ctx.stroke(); ctx.restore(); } } function DrawRectangleItem(divid, doc, item, ds) { if( item.width == 0 && item.height == 0 ) return; var canvas=document.createElement("canvas"); canvas.id=item.id + (cindex++)+ "cv"; divid.appendChild(canvas); if( !canvas.getContext ) G_vmlCanvasManager.initElement(canvas); canvas.style.position="absolute"; canvas.style.left=item.x + "px"; canvas.style.top=item.y + "px"; canvas.width=item.width + 1; canvas.height=item.height + 1; var ctx=canvas.getContext("2d"); ctx.save(); ctx.lineWidth=getLineThickness(doc, item); ctx.strokeStyle="#" + getLineColor(doc, item); ctx.beginPath(); if( item.edgetype == 1 ) { roundedRect(ctx, ctx.lineWidth / 2, ctx.lineWidth / 2, canvas.width - ctx.lineWidth, canvas.height - ctx.lineWidth, item.edgewidth); } else { ctx.rect(ctx.lineWidth / 2, ctx.lineWidth / 2, canvas.width - ctx.lineWidth, canvas.height - ctx.lineWidth); } ctx.closePath(); if( !item.transparent ) { ctx.fillStyle="#" + getBackgroundColor(doc, item); ctx.fill(); } ctx.stroke(); ctx.restore(); }; function roundedRect(ctx, x, y, width, height, radius){ ctx.beginPath(); ctx.moveTo(x,y+radius); ctx.lineTo(x,y+height-radius); ctx.quadraticCurveTo(x,y+height,x+radius,y+height); ctx.lineTo(x+width-radius,y+height); ctx.quadraticCurveTo(x+width,y+height,x+width,y+height-radius); ctx.lineTo(x+width,y+radius); ctx.quadraticCurveTo(x+width,y,x+width-radius,y); ctx.lineTo(x+radius,y); ctx.quadraticCurveTo(x,y,x,y+radius); }; function DrawCircleItem(divid, doc, item, ds) { if( item.width == 0 && item.height == 0 ) return; var canvas=document.createElement("canvas"); canvas.id=item.id + (cindex++)+ "cv"; divid.appendChild(canvas); if( !canvas.getContext ) G_vmlCanvasManager.initElement(canvas); canvas.style.position="absolute"; canvas.style.left=item.x + "px"; canvas.style.top=item.y + "px"; canvas.width=item.width + 1; canvas.height=item.height + 1; var ctx=canvas.getContext("2d"); ctx.save(); ctx.lineWidth=getLineThickness(doc, item); ctx.strokeStyle="#" + getLineColor(doc, item); var KAPPA=4 * ((Math.sqrt(2) - 1) / 3); var cx=canvas.width / 2; var cy=canvas.height / 2; var rx=cx * KAPPA; var ry=cy * KAPPA; ctx.beginPath(); ctx.moveTo(cx, ctx.lineWidth); ctx.bezierCurveTo(cx + rx, ctx.lineWidth, canvas.width - ctx.lineWidth, cy - ry, canvas.width - ctx.lineWidth, cy); ctx.bezierCurveTo(canvas.width - ctx.lineWidth, cy + ry, cx + rx, canvas.height - ctx.lineWidth, cx, canvas.height - ctx.lineWidth); ctx.bezierCurveTo(cx - rx, canvas.height - ctx.lineWidth, ctx.lineWidth, cy + ry, ctx.lineWidth, cy); ctx.bezierCurveTo(ctx.lineWidth, cy - ry, cx - rx, ctx.lineWidth, cx, ctx.lineWidth); ctx.closePath(); if( !item.transparent ) { ctx.fillStyle="#" + getBackgroundColor(doc, item); ctx.fill(); } ctx.stroke(); ctx.restore(); }; function DrawImageItem(divid, doc, item, keyurl, ds) { if( item.width == 0 || item.height == 0 ) return; var imageDiv=getImageDiv(doc, item); divid.appendChild(imageDiv); var imageobj=doc.objects.Lookup(item.imageid); if( imageobj.loadtype == 1 && imageobj.loadsrc != "" ) { if( _isMobile ) { var image=getImage2(doc, item, keyurl, imageobj); imageDiv.appendChild(image); } else { var canvas=getCanvas(doc, item); imageDiv.appendChild(canvas); drawCanvas2(doc, canvas, item, keyurl, imageobj); } } else if (imageobj.loadtype == 2 && imageobj.loadsrc != "" ) { var image=getImageType2(doc, item, keyurl, imageobj); imageDiv.innerHTML=image; imageDiv.style.textAlign=item.getHAlign(); } var borderDiv=getBorderDiv(doc, item); divid.appendChild(borderDiv); }; function DrawBarcodeItem(divid, doc, item, keyurl, ds) { if( item.width == 0 || item.height == 0 ) return; var imageDiv=getImageDiv(doc, item); divid.appendChild(imageDiv); if( item.loadtype == 1 && item.loadsrc != "" ) { if( _isMobile ) { var image=getImage(doc, item, keyurl); imageDiv.appendChild(image); } else { var canvas=getCanvas(doc, item); imageDiv.appendChild(canvas); drawCanvas(doc, canvas, item, keyurl); } } var borderDiv=getBorderDiv(doc, item); divid.appendChild(borderDiv); }; function DrawChartComponent(divid, doc, chart, keyurl, ds) { if( chart.width == 0 || chart.height == 0 ) return; var imageDiv=getImageDiv(doc, chart); divid.appendChild(imageDiv); if( chart.loadtype == 1 && chart.loadsrc != "" ) { if( _isMobile ) { var image=getImage(doc, chart, keyurl); imageDiv.appendChild(image); } else { var canvas=getCanvas(doc, chart); imageDiv.appendChild(canvas); drawCanvas(doc, canvas, chart, keyurl); } } }; function getBorderColor(tp, doc, item) { if( tp == "top") return doc.colors.Lookup(doc.lines.Lookup(doc.borders.Lookup(item.borderid).top).colorid).color; else if( tp == "right" ) return doc.colors.Lookup(doc.lines.Lookup(doc.borders.Lookup(item.borderid).right).colorid).color; else if( tp == "bottom" ) return doc.colors.Lookup(doc.lines.Lookup(doc.borders.Lookup(item.borderid).right).colorid).color; else if( tp == "left" ) return doc.colors.Lookup(doc.lines.Lookup(doc.borders.Lookup(item.borderid).right).colorid).color; }; function getBorderStyle(tp, doc, item) { if( tp == "top") return doc.lines.Lookup(doc.borders.Lookup(item.borderid).top).getStyle(); else if( tp == "right" ) return doc.lines.Lookup(doc.borders.Lookup(item.borderid).right).getStyle(); else if( tp == "bottom" ) return doc.lines.Lookup(doc.borders.Lookup(item.borderid).bottom).getStyle(); else if( tp == "left" ) return doc.lines.Lookup(doc.borders.Lookup(item.borderid).left).getStyle(); }; function getBorderWidth(tp, doc, item) { var width; var style=getBorderStyle(tp, doc, item); if( tp == "top") width=doc.lines.Lookup(doc.borders.Lookup(item.borderid).top).getWidth(); else if( tp == "right" ) width=doc.lines.Lookup(doc.borders.Lookup(item.borderid).right).getWidth(); else if( tp == "bottom" ) width=doc.lines.Lookup(doc.borders.Lookup(item.borderid).bottom).getWidth(); else if( tp == "left" ) width=doc.lines.Lookup(doc.borders.Lookup(item.borderid).left).getWidth(); if( style == "none" ) width=0; else { if( width % 2 == 1 ) width=parseInt(width / 2) + 1; else width=parseInt(width / 2); } return width; }; function getLineThickness(doc, item) { var width=doc.lines.Lookup(item.lineid).thickness; if( width != 0 ) { if( width % 2 == 1 ) width=parseInt(width / 2) + 1; else width=parseInt(width / 2); } return width; }; function getLineColor(doc, item) { return doc.colors.Lookup(doc.lines.Lookup(item.lineid).colorid).color; }; function getBackgroundColor(doc, item) { return doc.colors.Lookup(item.backgroundid).color; }; function getFont(doc, item) { return doc.fonts.Lookup(item.fontid).getFont(); }; function getFontSize(doc, item) { return doc.fonts.Lookup(item.fontid).getFontSize(); }; function getForegroundColor(doc, item) { return doc.colors.Lookup(item.foregroundid).color; }; function getImageDiv(doc, item) { var div=document.createElement("div"); div.id=item.id; div.style.overflow="hidden"; div.style.position="absolute"; div.style.left=item.x + "px"; div.style.top=item.y + "px"; div.style.width=(item.width + 1) + "px"; div.style.height=(item.height + 1) + "px"; return div; } function getBorderDiv(doc, item) { var div=document.createElement("div"); div.style.backgroundColor="transparent"; div.style.position="absolute"; div.style.left=item.x + "px"; div.style.top=item.y + "px"; div.style.width=(item.width + 1) - (getBorderWidth("left", doc, item) + getBorderWidth("right", doc, item)) + "px"; div.style.height=(item.height + 1) - (getBorderWidth("top", doc, item) + getBorderWidth("bottom", doc, item)) + "px"; div.style.borderTop=getBorderWidth("top", doc, item) + "px " + getBorderStyle("top", doc, item) + " #" + getBorderColor("top", doc, item); div.style.borderRight=getBorderWidth("right", doc, item) + "px " + getBorderStyle("right", doc, item) + " #" + getBorderColor("right", doc, item); div.style.borderBottom=getBorderWidth("bottom", doc, item) + "px " + getBorderStyle("bottom", doc, item) + " #" + getBorderColor("bottom", doc, item); div.style.borderLeft=getBorderWidth("left", doc, item) + "px " + getBorderStyle("left", doc, item) + " #" + getBorderColor("left", doc, item); return div; } function getCanvas(doc, item, ctx) { var canvas=document.createElement("canvas"); canvas.id=item.id + (cindex++)+ "cv"; return canvas; } function getImage(doc, item, keyurl) { var image=document.createElement("img"); image.id=item.id + (iindex++)+ "img"; image.src=keyurl + "&reqtype=3&daemonid="+doc.daemonid+"&imageid=" + item.loadsrc; image.style.position="absolute"; image.style.left=0 + "px"; image.style.top=0 + "px"; image.style.width=(item.width + 1) + "px"; image.style.height=(item.height + 1) + "px"; return image; } function getImage2(doc, item, keyurl, imageobj) { var image=document.createElement("img"); image.id=item.id + (iindex++)+ "img"; image.src=keyurl + "&reqtype=3&daemonid="+doc.daemonid+"&imageid=" + imageobj.loadsrc; if( imageobj.fixedrate || imageobj.originalsize ) { var imgleft=0; var imgtop=0; var imgwidth=(imageobj.width / 3) + 1; var imgheight=(imageobj.height / 3) + 1; if( imgwidth < (item.width + 1) && item.halign != 0 ) { if( item.halign == 1 ) imgleft=((item.width + 1) - imgwidth) / 2; else if( item.halign == 2 ) imgleft=((item.width + 1) - imgwidth); } if( imgheight < (item.height + 1) && item.valign != 0 ) { if( item.valign == 1 ) imgtop=((item.height + 1) - imgheight) / 2; else if( item.valign == 2 ) imgtop=((item.height + 1) - imgheight); } image.style.position="absolute"; image.style.left=imgleft + "px"; image.style.top=imgtop + "px"; image.style.width=imgwidth + "px"; image.style.height=imgheight + "px"; } else { image.style.position="absolute"; image.style.left=0 + "px"; image.style.top=0 + "px"; image.style.width=(item.width + 1) + "px"; image.style.height=(item.height + 1) + "px"; } return image; } function getImageType2(doc, item, keyurl, imageobj) { var innerhtml=""; if (item.valign != 0) { innerhtml += "<table width=\"100%\" height=\"100%\"><tr><td valign=\""+ item.getVAlign() +"\">"; } if (imageobj.originalsize) { innerhtml += "<div id=\"" + item.id + (iindex++)+ "img\" "; innerhtml += "style=\"background-image:url('"+ imageobj.loadsrc +"');" + "width:"+ item.width +"px; height:"+ item.height +"px; background-position:left top;"; } else { innerhtml += "<img id=\"" + item.id + (iindex++)+ "img\""; innerhtml += " src=\"" + imageobj.loadsrc +"\""; innerhtml += " style=\""; if (imageobj.fixedrate) { innerhtml += " max-width:"+ item.width +"px; width:expression(this.width > "+ item.width +"px?"+ item.width +"px: true);"; innerhtml += " max-height:"+ item.height +"px; height:expression(this.height > "+ item.height +"px?"+ item.height +"px: true);"; } else { innerhtml += " width:"+ item.width +"px; height:"+ item.height +"px;"; } } if (imageobj.brightness > 0) { innerhtml += " opacity:" + ((100-imageobj.brightness*2)/100) +"; " +" alpha(opacity:"+(100-imageobj.brightness*2)+");"; } innerhtml += "\">"; if (item.valign != 0) { innerhtml += "</td></tr></table>"; } return innerhtml; } function drawCanvas(doc, canvas, item, keyurl) { if( !canvas.getContext ) G_vmlCanvasManager.initElement(canvas); var ctx=canvas.getContext("2d"); canvas.style.position="absolute"; canvas.style.left=0 + "px"; canvas.style.top=0 + "px"; canvas.width=item.width + 1; canvas.height=item.height + 1; var image=new Image(); image.id=item.id + (iindex++)+ "img"; image.onload=function() { ctx.drawImage(image, 0, 0, canvas.width, canvas.height); }; image.src=keyurl + "&reqtype=3&daemonid="+doc.daemonid+"&imageid=" + item.loadsrc; } function drawCanvas2(doc, canvas, item, keyurl, imageobj) { if( !canvas.getContext ) G_vmlCanvasManager.initElement(canvas); var ctx=canvas.getContext("2d"); canvas.style.position="absolute"; canvas.style.left=0 + "px"; canvas.style.top=0 + "px"; canvas.width=item.width + 1; canvas.height=item.height + 1; var image=new Image(); image.id=item.id + (iindex++)+ "img"; image.onload=function() { if( imageobj.fixedrate || imageobj.originalsize ) { var imgleft=0; var imgtop=0; var imgwidth=(imageobj.width / 3) + 1; var imgheight=(imageobj.height / 3) + 1; if( imgwidth < canvas.width && item.halign != 0 ) { if( item.halign == 1 ) imgleft=(canvas.width - imgwidth) / 2; else if( item.halign == 2 ) imgleft=(canvas.width - imgwidth); } if( imgheight < canvas.height && item.valign != 0 ) { if( item.valign == 1 ) imgtop=(canvas.height - imgheight) / 2; else if( item.valign == 2 ) imgtop=(canvas.height - imgheight); } ctx.drawImage(image, imgleft, imgtop, imgwidth, imgheight); } else { ctx.drawImage(image, 0, 0, canvas.width, canvas.height); } }; if (imageobj.loadtype == 2) { image.src=imageobj.loadsrc; } else { image.src=keyurl + "&reqtype=3&daemonid="+doc.daemonid+"&imageid=" + imageobj.loadsrc; } } }});