<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
 			<value>classpath:com/hanaph/gw/properties/database_${server.type}.properties</value>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="true">
		<property name="driverClassName" value="${jdbc.driverClass}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="initialSize" value="5"/>
        <property name="maxActive" value="20"/>	<!-- 사이트의 최대 커넥션 사용량을 기준으로 지정. 동시 접속자수에 따라서 지정한다. DB성능도 고려.  -->
        <property name="minIdle" value="5"/>	<!-- 최소 커넥션 수 -->
        <property name="maxWait" value="3000"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxOpenPreparedStatements" value="50"/>
        <property name="validationQuery" value="select 1 from dual"/>	<!-- 커넥션 유효 여부 체크 쿼리 -->
        <property name="testWhileIdle" value="true"/>
        <property name="timeBetweenEvictionRunsMillis" value="7200000"/>
	</bean>
	
	<!-- 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.master.username}"/>
		<property name="password" value="${jdbc.master.password}"/>
	</bean>
	-->
	
    <!--  SqlSessionFactoryBean : SqlSessionTemplate 객체를 얻는다. -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" lazy-init="true">
    	<property name="dataSource" ref="dataSource" />
<!--         <property name="configLocation" value="/WEB-INF/config/mybatis-config.xml"/> -->
        <property name="mapperLocations" value="/WEB-INF/sqlMap/*.xml" />
    </bean>

 
    <!-- SqlSessionTemplate : MyBatis SQL method 호출 및 관리, 예예처리 담당 -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
      
    <!-- 트랜잭션관리자. -->       
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
     
    <!-- 트랜잭션과 관련된 작업(트랜잭션시작, 커및, 롤백등) -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    	<property name="transactionManager" ref="transactionManager" />
    </bean>
    
    <tx:annotation-driven transaction-manager="transactionManager"/> 
	
	<!-- 파일 업로드에 반드시 필요한 객체 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
	<!-- 파일 저장을 위한 객체 --> 
	
</beans>
