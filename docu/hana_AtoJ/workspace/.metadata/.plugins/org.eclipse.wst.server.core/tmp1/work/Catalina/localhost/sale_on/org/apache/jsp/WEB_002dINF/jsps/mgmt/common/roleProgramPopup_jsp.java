/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.55
 * Generated at: 2015-04-30 09:29:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsps.mgmt.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.hanaph.saleon.member.vo.LoginUserVO;
import com.hanaph.saleon.common.utils.StringUtil;
import com.hanaph.saleon.common.utils.WebUtil;

public final class roleProgramPopup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/include/head.jsp", Long.valueOf(1421734197738L));
    _jspx_dependants.put("/common/path.jsp", Long.valueOf(1430124365934L));
    _jspx_dependants.put("/common/sessionCheck.jsp", Long.valueOf(1430193978042L));
    _jspx_dependants.put("/include/footer_pop.jsp", Long.valueOf(1421734197738L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	LoginUserVO loginUserVO = (LoginUserVO) session.getAttribute("onlineUser");	//세션생성 세션에서 emp_code를 가져온다.
	
	String userEmpCode  = "";		// 사원 코드
	String userEmpName  = "";		// 사원 이름
	String userEmpGb    = "";		// 사원 구분 
	String userDeptCode = "";		// 부서코드
	String userDeptName = "";		// 부서명
	String userGradeName = "";		// 사원 Grade Name
	String userDeptCd = "";			//hanahr 부서정보
	String userAssgnCd = "";			//직책 코드
	String userAssgnName = "";			//직책 코드명
	/*
	 * 로그인 정보가 있는경우
	 */
	if(loginUserVO != null){
		userEmpCode = StringUtil.nvl(loginUserVO.getEmp_code());    	// 사용자코드
		userEmpName = StringUtil.nvl(loginUserVO.getEmp_name());		// 사용자명
		userEmpGb = StringUtil.nvl(loginUserVO.getEmp_gb());			// 사용자 구분 코드
		userDeptCode = StringUtil.nvl(loginUserVO.getDept_code());  	// 부서 코드
		userDeptName = StringUtil.nvl(loginUserVO.getDept_name());		// 부서 명
		userGradeName = StringUtil.nvl(loginUserVO.getGrade_name());	// 사용자 부서명
		userDeptCd = StringUtil.nvl(loginUserVO.getDept_cd());  	    // 부서 코드
		userAssgnCd = StringUtil.nvl(loginUserVO.getAssgn_cd());  	    // 직책 코드
		userAssgnName = StringUtil.nvl(loginUserVO.getAssgn_name());  	// 직책 코드명
	}
	
	/* 현재 URI에 해당하는 프로그램 No(pgm_no) */
	String currPgmNoByUri = request.getAttribute("pgm_no") == null ? "" : (String) request.getAttribute("pgm_no");

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

	com.hanaph.saleon.common.utils.Environment env = new com.hanaph.saleon.common.utils.Environment();	//환경 변수
	
	String HTTPS_ONLINE_WEB_ROOT = env.getValue("https.web_root_dir.url");
	String HTTPS_ONLINE_ROOT = env.getValue("https.root_dir.url");
	String ONLINE_WEB_ROOT = env.getValue("web_root_dir.url");		//URL 프로토콜, 도메인, 포트, 서브컨텍스트명, web디렉토리
	String ONLINE_ROOT = env.getValue("root_dir.url");				//URL 프로토콜, 도메인, 포트, 서브컨텍스트명
	String JDBC_URL = env.getValue("jdbc.url");
	

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

	String roleNo = StringUtil.nvl(request.getParameter("roleNo"));		// role no

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("\t");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar ONLINE_ROOT = \"");
      out.print(ONLINE_ROOT );
      out.write("\";\t\t/*환경변수*/\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/js/jquery-1.11.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/js/jquery-ui-1.10.4.custom.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/js/jquery.easyui.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/js/common.js\" charset=\"utf-8\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/js/default.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/js/placeholders.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/css/easyui.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/css/main.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/css/jquery-ui.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/css/smoothness/jquery-ui.theme.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/css/fonts.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/css/gw_sample.css\">");
      out.write("\r\n");
      out.write("\t<link rel=\"StyleSheet\" href=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/css/dtree.css\" type=\"text/css\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/css/ui.jqgrid.css\">\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/js/grid.locale-kr.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/js/jquery.jqGrid.min.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"");
      out.print(ONLINE_WEB_ROOT);
      out.write("/js/dtree.js\"></script>\t\r\n");
      out.write("\t<script type=\"text/javascript\" >\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/**\r\n");
      out.write("\t\t * 전역 변수 셋팅 부분\r\n");
      out.write("\t\t * roleNo  = role no\r\n");
      out.write("\t\t * param   = url의 get방식으로 넘길 role no\r\n");
      out.write("\t\t * selectedPgmNo\t\t= 선택 된 프로그램 no\r\n");
      out.write("\t\t * selectedUseBtn\t\t= 선택 된 버튼\r\n");
      out.write("\t\t * lastsel2\t\t\t\t= 선택 된 row id\r\n");
      out.write("\t\t * selectedPgmNoArray\t= 선택 된 프로그램 no를 담기 위한 배열\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\tvar roleNo = '");
      out.print(roleNo);
      out.write("';\t\t  \t\r\n");
      out.write("\t\tvar param = \"?roleNo=");
      out.print(roleNo);
      out.write("\";\r\n");
      out.write("\t\tvar selectedPgmNo = \"\";\r\n");
      out.write("\t\tvar selectedUseBtn = \"\";\r\n");
      out.write("\t\tvar lastsel2 =\"\";\r\n");
      out.write("\t\tvar selectedPgmNoArray = [];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/**\r\n");
      out.write("\t\t * window dom load시 최초 호출되는 jqgrid\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\t$(document).ready(function(){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#btn_list\").jqGrid({\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\turl : \"");
      out.print(ONLINE_ROOT);
      out.write("/mgmt/buttonListAjax.do?pgmNo=\"+selectedPgmNo+\"&useYn=Y\",\r\n");
      out.write("\t\t\t\t// 요청방식\r\n");
      out.write("\t\t\t\tmtype:\"post\",\r\n");
      out.write("\t\t\t\t// 결과물 받을 데이터 타입\r\n");
      out.write("\t\t\t\tdatatype:\"json\",\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\t// 컬럼명\r\n");
      out.write("\t\t\t\tcolNames:[\"\",\"버튼 ID\",\"버튼명\"],\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tcolModel:[\t\r\n");
      out.write("\t\t\t\t\t\t\t{name:\"btn_use_yn\",\tindex:\"btn_use_yn\", width:20, align:\"center\",\ttype:\"checkbox\", formatter: 'checkbox'\r\n");
      out.write("\t\t\t\t\t\t\t ,formatoptions:{disabled: false}, editable:true, edittype:\"checkbox\"\r\n");
      out.write("\t\t\t\t\t\t\t ,editoptions:{value:'Y:N' \r\n");
      out.write("\t\t\t\t\t\t\t\t\t  \t   ,dataEvents:[{type:'click', fn: function(e){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t  \t\tprogramButtonClick();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t  \t   }}]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}  \r\n");
      out.write("\t\t\t\t\t\t\t},\t\t// 사용 여부\r\n");
      out.write("\t\t\t\t\t\t\t{name:\"btn_id\",\t\tindex:\"btn_id\",\t\t\talign:\"left\",\twidth:100, type:\"text\", formatter: 'textbox'},\t\t\t\t\t\t\t\t\t// 버튼 ID\r\n");
      out.write("\t\t\t\t\t\t\t{name:\"btn_nm\",\t\tindex:\"btn_nm\", \t\talign:\"left\",\twidth:50, type:\"text\", formatter: 'textbox'}\t\t// 버튼 명\r\n");
      out.write("\t\t\t\t\t\t],\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 선택된 행의 데이터 가져오기.\r\n");
      out.write("\t\t\t    beforeSelectRow: function(rowid, e) {     //사용자가 row를 클릭하는 순간 발생 (return값 false시 선택안한걸로 간주함)\r\n");
      out.write("\t\t\t    \t$(\"#btn_list\").jqGrid('setSelection', rowid);\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t \t// 선택된 행의 데이터 가져오기.\r\n");
      out.write("\t\t\t\tonSelectRow: function(id){\r\n");
      out.write("\t\t\t\t\t$('#btn_list').editRow(id,true);\r\n");
      out.write("\t\t\t\t\tprogramButtonClick();\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 그리드 캡션\r\n");
      out.write("\t\t\t\theight:176,\r\n");
      out.write("\t\t\t\trowNum : -1, /* 페이지당 레코드수 초기값 */\r\n");
      out.write("\t\t\t\t//기본 정렬 값 -> 매개변수이름은 sidx(컬럼), sord(차순)로 요청된다\r\n");
      out.write("\t\t\t\tsortname :'btn_id',\r\n");
      out.write("\t\t\t\tsortorder:'asc',\r\n");
      out.write("\t\t\t\tautowidth:true,\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tloadComplete: function(data){\r\n");
      out.write("\t\t\t\t\tvar useBtn = selectedUseBtn;\r\n");
      out.write("\t\t\t\t\tif (data.records > 0) {\t\t\t// 버튼 리스트가 1건이상 존재 하는경우\r\n");
      out.write("\t\t\t\t\t\tfor(var idx=0; idx<data.records; idx++){\t// 버튼 리스트 갯수 만큼 for\r\n");
      out.write("\t\t\t\t\t\t\tvar trID = idx+1;\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\tif(useBtn.indexOf(data.rows[idx].btn_id) == -1){\t// 버튼 리스트에 버튼 string값이 존재 하지 않는 경우\r\n");
      out.write("\t\t\t\t\t\t\t\t$(\"tr#\"+trID+\" > td >\").removeAttr('checked');\t// 체크박스 체크 해재\r\n");
      out.write("\t\t\t\t\t\t\t\t$(\"tr#\"+trID+\" > td >\").val('N');\t\t\t\t// 체크박스 체크 해재 값\r\n");
      out.write("\t\t\t\t\t\t\t}else{\t\t\t\t\t\t\t\t\t\t\t\t// 버튼 리스트에 버튼 string값이 존재 하는 경우\r\n");
      out.write("\t\t\t\t\t\t\t\t$(\"tr#\"+trID+\" > td >\").attr('checked',true);\t// 체크박스 체크\r\n");
      out.write("\t\t\t\t\t\t\t\t$(\"tr#\"+trID+\" > td >\").val('Y');\t\t\t\t// 체크박스 체크 해재\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#roleProgramList\").clearGridData(); \t// 이전 그리드 삭제\r\n");
      out.write("\t\t\t$(\"#roleProgramList\").jqGrid('setGridParam',{url:\"");
      out.print(ONLINE_ROOT);
      out.write("/mgmt/regPgmListAjax.do\" + param}).trigger(\"reloadGrid\");\r\n");
      out.write("\t\t\t$(\"#roleProgramList\").jqGrid({\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\turl : \"");
      out.print(ONLINE_ROOT);
      out.write("/mgmt/regPgmListAjax.do?roleNo=\"+roleNo,\r\n");
      out.write("\t\t\t\t// 요청방식\r\n");
      out.write("\t\t\t\tmtype:\"post\",\r\n");
      out.write("\t\t\t\t// 결과물 받을 데이터 타입\r\n");
      out.write("\t\t\t\tdatatype:\"json\",\r\n");
      out.write("\t\t\t\t// 컬럼명\r\n");
      out.write("\t\t\t\tcolNames:[\"PGM No.\",\"프로그램 명\",\"프로그램 ID\",\"버튼\",\"Role No\",\"PgmKindCode\"],\r\n");
      out.write("\t\t\t\tcolModel:[\r\n");
      out.write("\t\t\t\t\t\t\t{name:\"pgm_no\",\t\t\tindex:\"pgm_no\",\t\t\t\talign:\"left\", width:45, key:true},\t\t// 프로그램 no\r\n");
      out.write("\t\t\t\t\t\t\t{name:\"pgm_name\",\t\tindex:\"pgm_name\",\t\t\talign:\"left\"},\t\t\t\t\t\t\t// 프로그램 명\r\n");
      out.write("\t\t\t\t\t\t\t{name:\"pgm_id\",\t\t\tindex:\"pgm_id\",\t\t\t\talign:\"left\"},\t\t\t\t\t\t\t// 프로그램 id\r\n");
      out.write("\t\t\t\t\t\t\t{name:\"use_btn\",\t\tindex:\"use_btn\",\t\t\talign:\"left\"},\t\t\t\t\t\t\t// 버튼 ID\r\n");
      out.write("\t\t\t\t\t\t\t{name:\"role_no\",\t\tindex:\"role_no\",\t\t\talign:\"left\", hidden:true},\t\t\t\t// role no\r\n");
      out.write("\t\t\t\t\t\t\t{name:\"pgm_kind_code\",\tindex:\"pgm_kind_code\",\t\talign:\"left\", hidden:true},\t\t\t\t// 프로그램 메뉴 구분\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t ],\r\n");
      out.write("\t\t\t\theight:236,\r\n");
      out.write("\t\t\t\trowNum: -1,\t\t  \t\t\t// 페이지 출력 글 수\r\n");
      out.write("\t\t\t\tsortname :'pgm_no',\t\t\t//기본 정렬 값 -> 매개변수이름은 sidx(컬럼), sord(차순)로 요청된다\r\n");
      out.write("\t\t\t\tsortorder:'asc',\r\n");
      out.write("\t\t\t\tautowidth:true,\t\t\t\t// 자동 가로 사이즈\r\n");
      out.write("\t\t\t\tonSelectRow: function(id){\t// 선택된 행의 데이터 가져오기.\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(id && id!==lastsel2){\t\t\t\t\t\t// 기존 전역 변수와 현재 선택된 행의 번호 가 다를 경우\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t$('#roleProgramList').restoreRow(lastsel2);\t// 선택 한 이전 jqgrid상태를 복원\r\n");
      out.write("\t\t\t\t    \tlastsel2=id;\t\t\t\t\t\t\t\t// 기존전역 변수 현재 선택된 행으로 셋팅\r\n");
      out.write("\t\t\t\t    \t\r\n");
      out.write("\t\t\t\t    \tvar selectedList = $(\"#roleProgramList\").getRowData(lastsel2);\t// 선택 된 행의 데이터 가져오기\r\n");
      out.write("\t\t\t\t    \t\r\n");
      out.write("\t\t\t\t    \tselectedPgmNo = selectedList.pgm_no;\t\t// 전역변수에 선택된 프로그램 no 셋팅\r\n");
      out.write("\t\t\t\t    \tselectedUseBtn = selectedList.use_btn;\t\t// 전역변수에 선택된 버튼 string 셋팅\r\n");
      out.write("\t\t\t\t    \t\r\n");
      out.write("\t\t\t\t    \tbuttonList(selectedPgmNo);\t\t\t\t\t// 버튼 리스트 jqgrid호출\r\n");
      out.write("\t\t\t\t    \t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t/**\r\n");
      out.write("\t\t\t\t * 프로그램 리스트 출력이 완료 된 후 \r\n");
      out.write("\t\t\t\t */\r\n");
      out.write("\t\t\t\tloadComplete: function(data){\r\n");
      out.write("\t\t\t\t\tif (data.records > 0) {\t\t\t\t\t\t// 프로그램 리스트가 1건이상인 경우\r\n");
      out.write("\t\t\t\t\t\tvar topPgmNo = data.rows[0].pgm_no;\t\t// 프로그램 no를 버튼의 최초건수 프로그램 no로 셋팅\r\n");
      out.write("\t\t\t\t\t\tselectedUseBtn = data.rows[0].use_btn;\t// 버튼 string을 버튼의 최초건수 버튼 string으로 셋팅\r\n");
      out.write("\t\t\t\t\t\t$(\"#roleProgramList\").jqGrid('setSelection', data.rows[0].pgm_no);\t// 최상단 건수 선택 된 값으로 셋팅\r\n");
      out.write("\t\t\t\t\t\tbuttonList(topPgmNo);\t\t\t\t\t// 버튼 jqgrid호출\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * window창 크기 조절\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\t$(window).resize(function(){\r\n");
      out.write("\t\t\t\t$(\"#btn_list\").setGridWidth($('.box_type01 w420 h200').width() , false);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 저장 버튼 클릭 : role insert DB insert\t\r\n");
      out.write("\t\t\t * @param jqgrid\t\t\tgetRowData\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\t$(\"#uc_save\").bind(\"click\",function(){\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar data = \"\";\t\t\t\t\t\t\t\t\t\t\t\t\t// 선택 된 행의 데이터 가져오기\r\n");
      out.write("\t\t\t\tvar dataUseBtn = \"\";\t\t\t\t\t\t\t\t\t\t\t// 버튼 string 데이터를 담을 변수\r\n");
      out.write("\t\t\t\tvar selectedUseBtnArray = [];\t\t\t\t\t\t\t\t\t// 버튼 string을 담을 배열\r\n");
      out.write("\t\t\t\tvar selectedPgmNoArrayJoin = selectedPgmNoArray.join(\"$\");\t\t// 프로그램 no를 담은 배열을 $형태로 조인\r\n");
      out.write("\t\t\t\tvar selectedUseBtnArrayJoin = \"\";\t\t\t\t\t\t\t\t// 버튼 string을 담은 배열의 $조인할 변수\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor(var saveIdx=0; saveIdx<selectedPgmNoArray.length; saveIdx++){\t\t\t// 선택 된 프로그램 배열 만큼 for\r\n");
      out.write("\t\t\t\t\tdata = $(\"#roleProgramList\").getRowData(selectedPgmNoArray[saveIdx]);\t// 선택 된 프로그램의 데이터 가져오기\r\n");
      out.write("\t\t\t\t\tdataUseBtn = data.use_btn;\t\t\t\t// 버튼 string set\r\n");
      out.write("\t\t\t\t\tselectedUseBtnArray.push(dataUseBtn);\t// 버튼 string 배열 담기 \r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tselectedUseBtnArrayJoin = selectedUseBtnArray.join(\"$\");\t// 버튼 배열 $문자열 합치기\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\ttype : \"POST\"\r\n");
      out.write("\t\t\t\t\t       \t, async : true\r\n");
      out.write("\t\t\t\t\t    \t, url : \"");
      out.print(ONLINE_ROOT );
      out.write("/mgmt/updateRoleProgramAjax.do\"\r\n");
      out.write("\t\t\t\t\t    \t, dataType : \"json\"\r\n");
      out.write("\t\t\t\t\t    \t, data : {roleNo:roleNo,pgmNo:selectedPgmNoArrayJoin,useBtn:selectedUseBtnArrayJoin}\r\n");
      out.write("\t\t\t\t\t    \t, success : function(data) {\r\n");
      out.write("\t\t\t\t\t    \t\tif(data.resultCode > 0){\r\n");
      out.write("\t\t\t\t\t    \t\t\talert(\"저장 되었습니다.\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\tCommons.treeMenuRightAjax(\"ROLE_MENU\",param);\t// 저장 후 메뉴 tree호출\r\n");
      out.write("\t\t\t\t\t\t\t\t\t$(\"#roleProgramList\").trigger(\"reloadGrid\");\t// jqgrid reload\r\n");
      out.write("\t\t\t\t\t\t\t\t\topener.reloadRoleProgram();\t\t\t\t\t\t// 상위 창 프로그램 목록 repload\r\n");
      out.write("\t\t\t\t\t    \t\t}\r\n");
      out.write("\t\t\t\t\t    }\r\n");
      out.write("\t\t\t\t\t    , error : function(request, status, error) {\r\n");
      out.write("\t\t\t\t\t\t     alert(\"code : \" + request.status + \"\\r\\nmessage : \" + request.reponseText);\r\n");
      out.write("\t\t\t\t\t    }\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 삭제 버튼 클릭 : role insert DB insert\t\r\n");
      out.write("\t\t\t * @param jqgrid\t\t\tgetRowData\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\t$(\"#uc_delete\").bind(\"click\",function(){\r\n");
      out.write("\t\t\t\tvar message = \"\";\r\n");
      out.write("\t\t\t\tvar selectedList = $(\"#roleProgramList\").getRowData(lastsel2);\r\n");
      out.write("\t\t    \tselectedPgmNo = selectedList.pgm_no;\r\n");
      out.write("\t\t    \t\r\n");
      out.write("\t\t    \tif(selectedPgmNo == \"\"){\r\n");
      out.write("\t\t    \t\talert(\"삭제 할 행을 선택 해주세요.\");\r\n");
      out.write("\t\t    \t\treturn;\r\n");
      out.write("\t\t    \t}\r\n");
      out.write("\t\t    \t\r\n");
      out.write("\t\t    \tif(selectedPgmNo == \"00000\"){\r\n");
      out.write("\t\t    \t\tmessage = \"최상위 메뉴를 삭제 하시면 메뉴 전체가 삭제 됩니다.\\n진행 하시겠습니까?\";\r\n");
      out.write("\t\t    \t}else{\r\n");
      out.write("\t\t    \t\tmessage = \"선택된 Role 프로그램을 삭제 하시겠습니까?\";\r\n");
      out.write("\t\t    \t}\r\n");
      out.write("\t\t    \t\r\n");
      out.write("\t    \t\tif(confirm(message)){\r\n");
      out.write("\t\t\t    \t$.ajax({\r\n");
      out.write("\t\t\t\t\t\ttype : \"POST\"\r\n");
      out.write("\t\t\t\t\t\t       \t, async : true\r\n");
      out.write("\t\t\t\t\t\t    \t, url : \"");
      out.print(ONLINE_ROOT );
      out.write("/mgmt/deleteRoleProgramAjax.do\"\r\n");
      out.write("\t\t\t\t\t\t    \t, dataType : \"json\"\r\n");
      out.write("\t\t\t\t\t\t    \t, data : {roleNo:roleNo,pgmNo:selectedPgmNo}\r\n");
      out.write("\t\t\t\t\t\t    \t, success : function(data) {\r\n");
      out.write("\t\t\t\t\t\t    \t\tif(data.resultCode > 0){\r\n");
      out.write("\t\t\t\t\t\t    \t\t\talert(\"삭제 되었습니다.\");\r\n");
      out.write("\t\t\t\t\t\t    \t\t\tif(selectedPgmNo == \"00000\"){\r\n");
      out.write("\t\t\t\t\t\t    \t\t\t\t//treeRight.innerHTML = \"\";\r\n");
      out.write("\t\t\t\t\t\t    \t\t\t\t$(\"#treeRight\").html(\"\");\r\n");
      out.write("\t\t\t\t\t\t    \t\t\t}\r\n");
      out.write("\t\t\t\t\t\t    \t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tCommons.treeMenuRightAjax(\"ROLE_MENU\",param);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t$(\"#roleProgramList\").trigger(\"reloadGrid\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\topener.reloadRoleProgram();\r\n");
      out.write("\t\t\t\t\t\t    \t\t}\r\n");
      out.write("\t\t\t\t\t\t    }\r\n");
      out.write("\t\t\t\t\t\t    , error : function(request, status, error) {\r\n");
      out.write("\t\t\t\t\t\t\t     alert(\"code : \" + request.status + \"\\r\\nmessage : \" + request.reponseText);\r\n");
      out.write("\t\t\t\t\t\t    }\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t    \t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/**\r\n");
      out.write("\t\t * window load 왼쪽 tree와 오른쪽 메뉴 트리를 호출 하고 팝업 호출 전 부모창의 role title을 가지고 온다.\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\t$(window).load(function() {\r\n");
      out.write("\t\t\tCommons.treeMenuLeftAjax(\"IN_USE\");\r\n");
      out.write("\t\t\tCommons.treeMenuRightAjax(\"ROLE_MENU\",param);\r\n");
      out.write("\t\t\t$(\"#roleTitle\").text($(\"#roleTitle\",opener.document).text());\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/**\r\n");
      out.write("\t\t * 왼쪽 tree menu 호출\r\n");
      out.write("\t\t * @param jqgrid\t\t\tgetRowData\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\tfunction leftTreeComplete(d){\r\n");
      out.write("\t\t\ttreeLeft.innerHTML = d;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/**\r\n");
      out.write("\t\t * 오른쪽 tree menu 호출\r\n");
      out.write("\t\t * @param jqgrid\t\t\tgetRowData\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\tfunction rightTreeComplete(d){\r\n");
      out.write("\t\t\ttreeRight.innerHTML = d;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/**\r\n");
      out.write("\t\t * 선택 된 프로그램의 버튼 list\r\n");
      out.write("\t\t * @param jqgrid\t\t\tgetRowData\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\tfunction buttonList(programNumber){\r\n");
      out.write("\t\t\tvar pgmNo = Commons.leadingZeros(programNumber,5);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(pgmNo != \"\"){\r\n");
      out.write("\t\t\t\t// 파라미터 셋팅\r\n");
      out.write("\t\t\t\tvar param = \"?pgmNo=\"+pgmNo;\r\n");
      out.write("\t\t\t\t$(\"#btn_list\").clearGridData(); \t// 이전 그리드 삭제\r\n");
      out.write("\t\t\t\t$(\"#btn_list\").jqGrid('setGridParam',{url:\"");
      out.print(ONLINE_ROOT);
      out.write("/mgmt/buttonListAjax.do\" + param}).trigger(\"reloadGrid\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/**\r\n");
      out.write("\t\t * 저장 버튼 클릭 : role insert DB insert\t\r\n");
      out.write("\t\t * @param jqgrid\t\t\tgetRowData\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\tfunction programButtonClick(){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar rowId = $(\"#roleProgramList\").getGridParam(\"selrow\");\t\t// role no\r\n");
      out.write("\t\t\tvar programButton = $(\"#roleProgramList\").getRowData(rowId);\t// 선택 된 데이터 가져오기\r\n");
      out.write("\t\t\tvar buttonRowId = $(\"#btn_list\").getGridParam(\"selrow\");\t\t// 체크 된 버튼 row id가져오기\r\n");
      out.write("\t\t\tvar selectedCheck = $(\"#btn_list\").getRowData(buttonRowId);\t\t// 체크 된 버튼 row id의 데이터 가져오기\r\n");
      out.write("\t\t\tvar textValue = programButton.use_btn;\t\t\t\t\t\t\t// 선택 된 데이터의 버튼 string 가져오기\r\n");
      out.write("\t\t\tvar selectedCheckBtnId = selectedCheck.btn_id;\t\t\t\t\t// 가져온 버튼 string을 변수에 담음\r\n");
      out.write("\t\t\tvar selectedBtnUseYn = selectedCheck.btn_use_yn;\t\t\t\t// 가져온 버튼 사용여부를 변수에 담음\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\tif(selectedBtnUseYn == \"N\"){\t\t\t\t// 버튼의 사용 여부가 N : 미사용일때\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\ttextValue = programButton.use_btn+\",\";\t\t\t// 선택된 버튼 string의 뒤에 ,문자열을 붙인다\r\n");
      out.write("\t\t\t\tselectedCheckBtnId = selectedCheck.btn_id+\",\";\t// 선택된 버튼 id의 뒤에 ,문자열을 붙인다\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(textValue.indexOf(selectedCheckBtnId) > -1){ // 기존 프로그램 버튼 string에 체크가 안된 버튼 string이 있을 경우 \r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\ttextValue = textValue.replace(selectedCheckBtnId,\"\");\t// 해당 버튼 string을 제외 해준다.\r\n");
      out.write("\t\t\t\t\ttextValue = textValue.slice(0,-1);\t\t\t\t\t\t// 마지막 , 삭제\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(textValue == \"\"){\t\t// textValue 값이 빈 값인 경우\r\n");
      out.write("\t\t\t\t\t\ttextValue = \" \";\t\t// 공백 값 추가\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t$(\"#roleProgramList\").setCell(rowId,\"use_btn\",textValue);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}else{\t\t\t\t\t\t\t\t\t// 버튼의 사용 여부가 Y : 사용일때\r\n");
      out.write("\t\t\t\tif(textValue.indexOf(selectedCheckBtnId) == -1){\t// 현재 버튼 string에 버튼이 없는 경우\r\n");
      out.write("\t\t\t\t\tif(textValue.trim() == \"\"){\t\t\t\t\t\t// 버튼 string이 아무 값이 없는 경우\r\n");
      out.write("\t\t\t\t\t\ttextValue = selectedCheck.btn_id;\t\t\t// 버튼 string 추가\r\n");
      out.write("\t\t\t\t\t}else{\t\t\t\t\t\t\t\t\t\t\t// 버튼 string에 값이 있는 경우\r\n");
      out.write("\t\t\t\t\t\ttextValue = textValue+\",\"+selectedCheck.btn_id;\t\t//  기존 값 + 선택 한 버튼 string 추가\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t$(\"#roleProgramList\").setCell(rowId,\"use_btn\",textValue);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(programButton.pgm_kind_code == \"P\"){\t// 메뉴 폴더가 아닌경우\r\n");
      out.write("\t\t\t\tif(selectedPgmNoArray.join().indexOf(programButton.pgm_no) == -1){\r\n");
      out.write("\t\t\t\t\tselectedPgmNoArray.push(selectedPgmNo);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/**\r\n");
      out.write("\t\t * 왼쪽 tree menu의 프로그램 선택 시 오른쪽 tree의 메뉴 추가 기능\r\n");
      out.write("\t\t * @param jqgrid\t\t\tgetRowData\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\tfunction selectedMenu(programNumber,type){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar pgmNo = Commons.leadingZeros(programNumber,5);\t\t// 숫자 형태의 변수를 앞자리 0을 붙여 문자 형태로 변환\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(type==\"left\"){\t\t\t\t\t\t\t\t\t\t// left tree일 경우\r\n");
      out.write("\t\t\t\tif(confirm(\"선택 된 메뉴를 추가 하시겠습니까?\")){\r\n");
      out.write("\t\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\t\ttype : \"POST\"\r\n");
      out.write("\t\t\t\t\t\t       \t, async : true\r\n");
      out.write("\t\t\t\t\t\t    \t, url : \"");
      out.print(ONLINE_ROOT );
      out.write("/mgmt/insertRoleProgramAjax.do\"\r\n");
      out.write("\t\t\t\t\t\t    \t, dataType : \"json\"\r\n");
      out.write("\t\t\t\t\t\t    \t, data : {roleNo:roleNo,pgmNo:pgmNo}\r\n");
      out.write("\t\t\t\t\t\t    \t, success : function(data) {\r\n");
      out.write("\t\t\t\t\t\t    \t\tif(data.resultCode > 0){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\talert(\"추가 되었습니다.\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t$(\"#roleProgramList\").trigger(\"reloadGrid\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tCommons.treeMenuRightAjax(\"ROLE_MENU\",param);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\topener.reloadRoleProgram();\r\n");
      out.write("\t\t\t\t\t\t    \t\t}else{\r\n");
      out.write("\t\t\t\t\t\t    \t\t\talert(\"이미 등록된 프로그램 입니다.\");\r\n");
      out.write("\t\t\t\t\t\t    \t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t    \t\t}\r\n");
      out.write("\t\t\t\t\t\t    \t\t\r\n");
      out.write("\t\t\t\t\t\t    }\r\n");
      out.write("\t\t\t\t\t\t    , error : function(request, status, error) {\r\n");
      out.write("\t\t\t\t\t\t\t     alert(\"code : \" + request.status + \"\\r\\nmessage : \" + request.reponseText);\r\n");
      out.write("\t\t\t\t\t\t    }\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\t$(\"#roleProgramList\").jqGrid('setSelection', pgmNo);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/**\r\n");
      out.write("\t\t * 정렬순서를 기본 셋팅하여 주는 함수 \r\n");
      out.write("\t\t * @param programNumber\t\t\t선택 된 프로그램 no\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\tfunction sortSetting(programNumber){}\r\n");
      out.write("\t\t\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"popup\" title=\"Main\">\r\n");
      out.write("\t\t<!-- ##### content start ##### -->\r\n");
      out.write("\t\t<!-- window size : 1000 * 770 -->\r\n");
      out.write("\t\t\t<h1 class=\"tit\" id=\"roleTitle\"></h1>\r\n");
      out.write("\t\t\t<div class=\"wrap_program\">\r\n");
      out.write("\t\t\t\t<div class=\"float_l\">\r\n");
      out.write("\t\t\t\t\t<h2 class=\"tit\">프로그램 사용 메뉴</h2>\r\n");
      out.write("\t\t\t\t\t<div class=\"box_type01 w245 h550\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"list_button\" style=\"width:92px; margin:10px auto\">\r\n");
      out.write("\t\t\t\t\t\t\t<button class=\"type_01\" onclick=\"javascript: d.openAll();\">펼치기</button>\r\n");
      out.write("\t\t\t\t\t\t\t<button class=\"type_01\" onclick=\"javascript: d.closeAll();\">접기</button>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div id=\"treeLeft\" class=\"mt10\"></div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"float_l ml10\">\r\n");
      out.write("\t\t\t\t\t<h2 class=\"tit\">Role 등록 프로그램</h2>\r\n");
      out.write("\t\t\t\t\t<div class=\"box_type01 w420 h260\">\r\n");
      out.write("\t\t\t\t\t\t<table id=\"roleProgramList\"></table>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<h2 class=\"tit mt30\">프로그램 버튼 List</h2>\r\n");
      out.write("\t\t\t\t\t<div class=\"box_type01 w420 h200\">\r\n");
      out.write("\t\t\t\t\t\t<table id=\"btn_list\"></table>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"ta_r mt10\">\r\n");
      out.write("\t\t\t\t\t\t<button id=\"uc_delete\">삭제</button>\r\n");
      out.write("\t\t\t\t\t\t<button id=\"uc_save\">저장</button>\r\n");
      out.write("\t\t\t\t\t\t<button id=\"uc_close\" onclick=\"self.close();\">닫기</button>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"float_l ml10\">\r\n");
      out.write("\t\t\t\t\t<h2 class=\"tit\">Role 등록 미리보기</h2>\r\n");
      out.write("\t\t\t\t\t<div class=\"box_type01 w245 h550\" >\r\n");
      out.write("\t\t\t\t\t\t<div class=\"list_button\" style=\"width:92px; margin:10px auto\">\r\n");
      out.write("\t\t\t\t\t\t\t<button class=\"type_01\" onclick=\"javascript: d2.openAll();\">펼치기</button>\r\n");
      out.write("\t\t\t\t\t\t\t<button class=\"type_01\" onclick=\"javascript: d2.closeAll();\">접기</button>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div id=\"treeRight\" class=\"mt10\"></div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<button class=\"close\"><span class=\"blind\">닫기</span></button>\r\n");
      out.write("\t\t<!-- ##### content end ##### -->\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<div class=\"wrap_pop_foot\">\r\n");
      out.write("\t<div class=\"footer\">\r\n");
      out.write("\t\t<p>Copyright ⓒ 2014 <span class=\"copy_fc\">HANA PHARM CO.</span>, LTD. All Right Reserved.</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
